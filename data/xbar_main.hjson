// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

{ name: "main",
  type: "xbar",
  clock: "clk_sys_i", // Main clock, used in sockets
  clock_connections: {
    clk_sys_i: "main",
    clk_usb_i: "usb",
  },
  reset: "rst_sys_ni",
  reset_connections: {
    rst_sys_ni: "sys",
    rst_usb_ni: "usb",
  },
  nodes: [
    { name:  "ibex_lsu", // Load store unit
      type:  "host",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      pipeline: false,
    },
    { name:  "dbg_host", // Debug module host
      type:  "host",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      pipeline: false,
    },
    { name:  "sram", // Internal memory
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x00100000",
        size_byte: "0x00040000",
      }],
    },
    { name:  "hyperram", // HyperRAM memory
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x40000000",
        size_byte: "0x00100000",
      }],
    },
    { name:  "rev_tag", // Revocation tag memory
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x30000000",
        size_byte: "0x00004000",
      }],
    },
    { name:  "gpio", // General purpose input and output
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80000000",
        size_byte: "0x00001000",
      }],
    },
    { name:  "pwm", // Pulse width modulator
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80001000",
        size_byte: "0x00001000",
      }],
    },
    { name:  "pinmux", // Pin multiplexer
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80005000",
        size_byte: "0x00001000",
      }],
    },
    { name:  "rgbled_ctrl", // RGB LED Controller
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80009000",
        size_byte: "0x00001000",
      }],
    },
    { name:  "hw_rev", // Hardware revoker control register
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x8000A000",
        size_byte: "0x00001000",
      }],
    },
    { name:  "xadc", // XADC
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x8000B000",
        size_byte: "0x00001000",
      }],
    },
    { name:  "timer", // Interrupt timer
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80040000",
        size_byte: "0x00010000",
      }],
    },
    % for i in range(uart_num):
    { name:  "uart${i}", // UART ${i} for serial I/O
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x8010${i}000",
        size_byte: "0x00001000",
      }],
    },
    % endfor
    % for i in range(i2c_num):
    { name:  "i2c${i}", // I2C bus ${i}
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x8020${i}000",
        size_byte: "0x00001000",
      }],
    },
    % endfor
    % for i in range(spi_num):
    { name:  "spi${i}", // Serial peripheral interface ${i}
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x8030${i}000",
        size_byte: "0x00001000",
      }],
    },
    % endfor
    { name:  "usbdev", // USB device
      type:  "device",
      clock: "clk_usb_i",
      reset: "rst_usb_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80400000",
        size_byte: "0x00001000",
      }],
    },
    % for i in range(gpio_num):
    { name:  "gpio${i}", // General purpose input and output ${i}
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x8050${i}000",
        size_byte: "0x00001000",
      }],
    },
    % endfor
    { name:  "rv_plic", // RISC-V platform interrupt controller
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        // This block is overaligned to 0x0800_0000 bytes since OpenTitan RV_PLIC block expects it.
        base_addr: "0x88000000",
        size_byte: "0x04000000",
      }],
    },
  ],
  connections: {
    ibex_lsu: [
      "sram",
      "hyperram",
      "rev_tag",
      "gpio",
      "pwm",
      "pinmux",
      "rgbled_ctrl",
      "hw_rev",
      "xadc",
      "timer",
      % for i in range(uart_num):
      "uart${i}",
      % endfor
      % for i in range(i2c_num):
      "i2c${i}",
      % endfor
      % for i in range(spi_num):
      "spi${i}",
      % endfor
      "usbdev",
      % for i in range(gpio_num):
      "gpio${i}",
      % endfor
      "rv_plic",
    ],
    dbg_host: ["sram"],
  },
}
