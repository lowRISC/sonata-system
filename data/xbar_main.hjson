// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

{ name: "main",
  type: "xbar",
  clock: "clk_sys_i", // Main clock, used in sockets
  clock_connections: {
    clk_sys_i: "main",
    clk_usb_i: "usb",
  },
  reset: "rst_sys_ni",
  reset_connections: {
    rst_sys_ni: "sys",
    rst_usb_ni: "usb",
  },
  nodes: [
    { name:  "ibex_lsu", // Load store unit
      type:  "host",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      pipeline: false,
    },
    { name:  "dbg_host", // Debug module host
      type:  "host",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      req_fifo_pass: false,
      rsp_fifo_pass: false,
      xbar:  false,
      pipeline: true,
    },
    { name:  "sram", // Internal memory
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x00100000",
        size_byte: "0x00020000",
      }],
    },
    { name:  "hyperram", // HyperRAM memory
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x40000000",
        size_byte: "0x00100000",
      }],
    },
    { name:  "rev_tag", // Revocation tag memory
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x30000000",
        size_byte: "0x00000800",
      }],
    },
    { name:  "peri",
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80000000",
        size_byte: "0x00200000",
      }],
      pipeline: true,
      req_fifo_pass: false,
      rsp_fifo_pass: false,
    },
    { name:  "spi_lcd",
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80300000",
        size_byte: "0x00001000",
      }],
    },
    { name:  "spi_ethmac",
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80301000",
        size_byte: "0x00001000",
      }],
    },
    // I^2C devices included here instead of in peri only because
    // address range sizes must be a power of two.
    // We can easily tolerate an extra cycle of access latency to them,
    // so add pipelining to allow them to be placed further away physically.
    % for block in config.blocks:
    % if block.which_xbar == "main":
    % for i in range(block.instances):
    { name:  "${f"{block.name}{i}"}",
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "${hex(block.memory_start + i * block.memory_size)}",
        size_byte: "${hex(block.memory_size)}",
      }],
      % for (setting, value) in block.xbar.items():
      ${setting}: ${value},
      % endfor
    },
    % endfor
    % endif
    % endfor
    { name:  "usbdev", // USB device
      type:  "device",
      clock: "clk_usb_i",
      reset: "rst_usb_ni",
      xbar:  false,
      addr_range: [{
        base_addr: "0x80400000",
        size_byte: "0x00001000",
      }],
    },
    { name:     "dbg_dev", // Debug module fetch interface
      type:     "device",
      clock:    "clk_sys_i",
      reset:    "rst_sys_ni",
      req_fifo_pass: false,
      rsp_fifo_pass: false,
      xbar:     false,
      pipeline: true,
      addr_range: [{
        base_addr: "0xB0000000",
        size_byte: "0x00001000",
      }],
    },
    { name:  "rv_plic", // RISC-V platform interrupt controller
      type:  "device",
      clock: "clk_sys_i",
      reset: "rst_sys_ni",
      xbar:  false,
      addr_range: [{
        // This block is overaligned to 0x0800_0000 bytes since OpenTitan RV_PLIC block expects it.
        base_addr: "0x88000000",
        size_byte: "0x04000000",
      }],
    },
  ],
  connections: {
    ibex_lsu: [
      "sram",
      "hyperram",
      "rev_tag",
      "peri",
      "spi_lcd",
      "spi_ethmac",
      % for block in config.blocks:
      % if block.which_xbar == "main":
      % for i in range(block.instances):
      "${f"{block.name}{i}"}",
      % endfor
      % endif
      % endfor
      "usbdev",
      "dbg_dev",
      "rv_plic",
    ],
    dbg_host: [
      "sram",
      "hyperram",
      "peri", // for system_info
    ],
  },
}
