diff --git a/rtl/tlul_adapter_host.sv b/rtl/tlul_adapter_host.sv
index e45aea5..0a7ed04 100644
--- a/rtl/tlul_adapter_host.sv
+++ b/rtl/tlul_adapter_host.sv
@@ -37,12 +37,14 @@ module tlul_adapter_host
   input  logic [top_pkg::TL_AW-1:0]  addr_i,
   input  logic                       we_i,
   input  logic [top_pkg::TL_DW-1:0]  wdata_i,
+  input  logic                       wdata_cap_i,
   input  logic [DataIntgWidth-1:0]   wdata_intg_i,
   input  logic [top_pkg::TL_DBW-1:0] be_i,
   input  mubi4_t                     instr_type_i,
 
   output logic                       valid_o,
   output logic [top_pkg::TL_DW-1:0]  rdata_o,
+  output logic                       rdata_cap_o,
   output logic [DataIntgWidth-1:0]   rdata_intg_o,
   output logic                       err_o,
   output logic                       intg_err_o,
@@ -103,7 +105,7 @@ module tlul_adapter_host
     a_source:  tl_source,
     a_address: {addr_i[31:WordSize], {WordSize{1'b0}}},
     a_data:    wdata_i,
-    a_user:    '{default: '0, data_intg: wdata_intg_i, instr_type: instr_type_i},
+    a_user:    '{default: '0, data_intg: wdata_intg_i, instr_type: instr_type_i, capability: wdata_cap_i},
     d_ready:   1'b1
   };
 
@@ -116,6 +118,7 @@ module tlul_adapter_host
 
   assign valid_o      = tl_i.d_valid;
   assign rdata_o      = tl_i.d_data;
+  assign rdata_cap_o  = tl_i.d_user.capability;
   assign rdata_intg_o = tl_i.d_user.data_intg;
 
   logic intg_err;
diff --git a/rtl/tlul_adapter_sram.sv b/rtl/tlul_adapter_sram.sv
index b76fdae..604599b 100644
--- a/rtl/tlul_adapter_sram.sv
+++ b/rtl/tlul_adapter_sram.sv
@@ -54,9 +54,11 @@ module tlul_adapter_sram
   output logic                we_o,
   output logic [SramAw-1:0]   addr_o,
   output logic [DataOutW-1:0] wdata_o,
+  output logic                wdata_cap_o,
   output logic [DataOutW-1:0] wmask_o,
   output logic                intg_error_o,
   input        [DataOutW-1:0] rdata_i,
+  input                       rdata_cap_i,
   input                       rvalid_i,
   input        [1:0]          rerror_i // 2 bit error [1]: Uncorrectable, [0]: Correctable
 );
@@ -192,6 +194,7 @@ module tlul_adapter_sram
 
   typedef struct packed {
     logic [top_pkg::TL_DW-1:0] data ;
+    logic                      data_cap ;
     logic [DataIntgWidth-1:0]  data_intg ;
     logic                      error ;
   } rsp_t ;
@@ -289,6 +292,10 @@ module tlul_adapter_sram
   assign d_data = (vld_rd_rsp & ~d_error) ? rspfifo_rdata.data   // valid read
                                           : error_blanking_data; // write or TL-UL error
 
+  logic d_cap;
+  assign d_cap = (vld_rd_rsp & ~d_error) ? rspfifo_rdata.data_cap // valid read
+                                         : 0;                     // write or TL-UL error
+
   // If this a write response with data fields set to 0, we have to set all ECC bits correctly
   // since we are using an inverted Hsiao code.
   logic [DataIntgWidth-1:0] data_intg;
@@ -304,7 +311,7 @@ module tlul_adapter_sram
       d_source : (d_valid) ? reqfifo_rdata.source : '0,
       d_sink   : 1'b0,
       d_data   : d_data,
-      d_user   : '{default: '0, data_intg: data_intg},
+      d_user   : '{default: '0, data_intg: data_intg, capability: d_cap},
       d_error  : d_valid && d_error,
       a_ready  : (gnt_i | error_internal) & reqfifo_wready & sramreqfifo_wready
   };
@@ -344,6 +351,9 @@ module tlul_adapter_sram
   logic [WidthMult-1:0][top_pkg::TL_DW-1:0] wmask_int;
   logic [WidthMult-1:0][top_pkg::TL_DW-1:0] wdata_int;
 
+  // Capability portion
+  logic wcap_int;
+
   // Integrity portion
   logic [WidthMult-1:0][DataIntgWidth-1:0] wmask_intg;
   logic [WidthMult-1:0][DataIntgWidth-1:0] wdata_intg;
@@ -351,12 +361,14 @@ module tlul_adapter_sram
   always_comb begin
     wmask_int = '0;
     wdata_int = '0;
+    wcap_int  = '0;
 
     if (tl_i_int.a_valid) begin
       for (int i = 0 ; i < top_pkg::TL_DW/8 ; i++) begin
         wmask_int[woffset][8*i +: 8] = {8{tl_i_int.a_mask[i]}};
         wdata_int[woffset][8*i +: 8] = (tl_i_int.a_mask[i] && we_o) ? tl_i_int.a_data[8*i+:8] : '0;
       end
+      wcap_int = we_o ? tl_i_int.a_user.capability : 1'b0;
     end
   end
 
@@ -384,6 +396,7 @@ module tlul_adapter_sram
 
   assign wmask_o = wmask_combined;
   assign wdata_o = wdata_combined;
+  assign wdata_cap_o = wcap_int;
 
   assign reqfifo_wvalid = a_ack ; // Push to FIFO only when granted
   assign reqfifo_wdata  = '{
@@ -439,6 +452,7 @@ module tlul_adapter_sram
 
   assign rspfifo_wdata  = '{
     data      : rdata_tlword[top_pkg::TL_DW-1:0],
+    data_cap  : rdata_cap_i,
     data_intg : EnableDataIntgPt ? rdata_tlword[DataWidth-1 -: DataIntgWidth] : '0,
     error     : rerror_i[1] // Only care for Uncorrectable error
   };
@@ -546,6 +560,7 @@ module tlul_adapter_sram
   `ASSERT_KNOWN(WeOutKnown_A,    we_o   )
   `ASSERT_KNOWN(AddrOutKnown_A,  addr_o )
   `ASSERT_KNOWN(WdataOutKnown_A, wdata_o)
+  `ASSERT_KNOWN(WcapOutKnown_A,  wdata_cap_o)
   `ASSERT_KNOWN(WmaskOutKnown_A, wmask_o)
 
 endmodule
diff --git a/rtl/tlul_pkg.sv b/rtl/tlul_pkg.sv
index 4e9401f..1652196 100644
--- a/rtl/tlul_pkg.sv
+++ b/rtl/tlul_pkg.sv
@@ -46,13 +46,15 @@ package tlul_pkg;
     prim_mubi_pkg::mubi4_t      instr_type;
     logic [H2DCmdIntgWidth-1:0] cmd_intg;
     logic [DataIntgWidth-1:0]   data_intg;
+    logic                       capability;
   } tl_a_user_t;
 
   parameter tl_a_user_t TL_A_USER_DEFAULT = '{
     rsvd: '0,
     instr_type: prim_mubi_pkg::MuBi4False,
     cmd_intg:  {H2DCmdIntgWidth{1'b1}},
-    data_intg: {DataIntgWidth{1'b1}}
+    data_intg: {DataIntgWidth{1'b1}},
+    capability: 1'b0
   };
 
   typedef struct packed {
@@ -95,11 +97,13 @@ package tlul_pkg;
   typedef struct packed {
     logic [D2HRspIntgWidth-1:0]    rsp_intg;
     logic [DataIntgWidth-1:0]      data_intg;
+    logic                          capability;
   } tl_d_user_t;
 
   parameter tl_d_user_t TL_D_USER_DEFAULT = '{
     rsp_intg: {D2HRspIntgWidth{1'b1}},
-    data_intg: {DataIntgWidth{1'b1}}
+    data_intg: {DataIntgWidth{1'b1}},
+    capability: 1'b0
   };
 
   typedef struct packed {
diff --git a/rtl/tlul_socket_1n.sv b/rtl/tlul_socket_1n.sv
index 607a212..275094a 100644
--- a/rtl/tlul_socket_1n.sv
+++ b/rtl/tlul_socket_1n.sv
@@ -144,7 +144,8 @@ module tlul_socket_1n #(
     rsvd: tl_t_o.a_user.rsvd,
     instr_type: tl_t_o.a_user.instr_type,
     cmd_intg: tlul_pkg::get_bad_cmd_intg(tl_t_o),
-    data_intg: tlul_pkg::get_bad_data_intg(tlul_pkg::BlankedAData)
+    data_intg: tlul_pkg::get_bad_data_intg(tlul_pkg::BlankedAData),
+    capability: 1'b0
   };
 
   // if a host is not selected, or if requests are held off, blank the bus
