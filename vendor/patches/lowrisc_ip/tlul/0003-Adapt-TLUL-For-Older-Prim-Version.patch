diff --git a/rtl/tlul_adapter_sram.sv b/rtl/tlul_adapter_sram.sv
index ec764cb..b76fdae 100644
--- a/rtl/tlul_adapter_sram.sv
+++ b/rtl/tlul_adapter_sram.sv
@@ -33,7 +33,6 @@ module tlul_adapter_sram
   parameter bit EnableRspIntgGen  = 0,  // 1: Generate response integrity
   parameter bit EnableDataIntgGen = 0,  // 1: Generate response data integrity
   parameter bit EnableDataIntgPt  = 0,  // 1: Passthrough command/response data integrity
-  parameter bit SecFifoPtr        = 0,  // 1: Duplicated fifo pointers
   localparam int WidthMult        = SramDw / top_pkg::TL_DW,
   localparam int IntgWidth        = tlul_pkg::DataIntgWidth * WidthMult,
   localparam int DataOutW         = EnableDataIntgPt ? SramDw + IntgWidth : SramDw
@@ -73,7 +72,6 @@ module tlul_adapter_sram
   logic instr_error;
   logic wr_vld_error;
   logic rd_vld_error;
-  logic rsp_fifo_error;
   logic intg_error;
   logic tlul_error;
 
@@ -92,14 +90,14 @@ module tlul_adapter_sram
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
       intg_error_q <= '0;
-    end else if (intg_error || rsp_fifo_error) begin
+    end else if (intg_error) begin
       intg_error_q <= 1'b1;
     end
   end
 
   // integrity error output is permanent and should be used for alert generation
   // or other downstream effects
-  assign intg_error_o = intg_error | rsp_fifo_error | intg_error_q;
+  assign intg_error_o = intg_error | intg_error_q;
 
   // wr_attr_error: Check if the request size, mask are permitted.
   //    Basic check of size, mask, addr align is done in tlul_err module.
@@ -476,8 +474,7 @@ module tlul_adapter_sram
     .rready_i(reqfifo_rready),
     .rdata_o (reqfifo_rdata),
     .full_o  (),
-    .depth_o (),
-    .err_o   ()
+    .depth_o ()
   );
 
   // sramreqfifo:
@@ -499,8 +496,7 @@ module tlul_adapter_sram
     .rready_i(sramreqfifo_rready),
     .rdata_o (sramreqfifo_rdata),
     .full_o  (),
-    .depth_o (),
-    .err_o   ()
+    .depth_o ()
   );
 
   // Rationale having #Outstanding depth in response FIFO.
@@ -512,8 +508,7 @@ module tlul_adapter_sram
   prim_fifo_sync #(
     .Width   (RspFifoWidth),
     .Pass    (1'b1),
-    .Depth   (Outstanding),
-    .Secure  (SecFifoPtr)
+    .Depth   (Outstanding)
   ) u_rspfifo (
     .clk_i,
     .rst_ni,
@@ -525,8 +520,7 @@ module tlul_adapter_sram
     .rready_i(rspfifo_rready),
     .rdata_o (rspfifo_rdata),
     .full_o  (),
-    .depth_o (),
-    .err_o   (rsp_fifo_error)
+    .depth_o ()
   );
 
   // below assertion fails when SRAM rvalid is asserted even though ReqFifo is empty
diff --git a/rtl/tlul_fifo_sync.sv b/rtl/tlul_fifo_sync.sv
index b697e47..a34835e 100644
--- a/rtl/tlul_fifo_sync.sv
+++ b/rtl/tlul_fifo_sync.sv
@@ -56,8 +56,7 @@ module tlul_fifo_sync #(
                      tl_d_o.a_user   ,
                      spare_req_o}),
     .full_o        (),
-    .depth_o       (),
-    .err_o         ());
+    .depth_o       ());
 
   // Put everything on the response side into the other FIFO
 
@@ -91,7 +90,6 @@ module tlul_fifo_sync #(
                      tl_h_o.d_error ,
                      spare_rsp_o}),
     .full_o        (),
-    .depth_o       (),
-    .err_o         ());
+    .depth_o       ());
 
 endmodule
diff --git a/rtl/tlul_sram_byte.sv b/rtl/tlul_sram_byte.sv
index c2db20c..96d34c3 100644
--- a/rtl/tlul_sram_byte.sv
+++ b/rtl/tlul_sram_byte.sv
@@ -168,8 +168,7 @@ module tlul_sram_byte import tlul_pkg::*; #(
       .rready_i(sram_a_ack),
       .rdata_o(held_data),
       .full_o(),
-      .depth_o(),
-      .err_o()
+      .depth_o()
     );
 
     // captured read data
@@ -283,8 +282,7 @@ module tlul_sram_byte import tlul_pkg::*; #(
       .rready_i(d_ack),
       .rdata_o(a_size),
       .full_o(),
-      .depth_o(pending_txn_cnt),
-      .err_o()
+      .depth_o(pending_txn_cnt)
     );
 
     always_comb begin
