diff --git a/uartdpi.c b/uartdpi.c
index f99b9da3..24b5d93e 100644
--- a/uartdpi.c
+++ b/uartdpi.c
@@ -19,16 +19,21 @@
 #include <string.h>
 #include <unistd.h>
 
+#define EXIT_STRING_MAX_LENGTH (64)
+
 // This keeps the necessary uart state.
 struct uartdpi_ctx {
   char ptyname[64];
+  char exitstring[EXIT_STRING_MAX_LENGTH];
+  int exittracker;
   int host;
   int device;
   char tmp_read;
   FILE *log_file;
 };
 
-void *uartdpi_create(const char *name, const char *log_file_path) {
+void *uartdpi_create(const char *name, const char *log_file_path,
+                     const char *exit_string) {
   struct uartdpi_ctx *ctx =
       (struct uartdpi_ctx *)malloc(sizeof(struct uartdpi_ctx));
   assert(ctx);
@@ -84,6 +89,20 @@ void *uartdpi_create(const char *name, const char *log_file_path) {
     }
   }
 
+  ctx->exittracker = 0;
+  if (strnlen(exit_string, EXIT_STRING_MAX_LENGTH) < EXIT_STRING_MAX_LENGTH) {
+    strncpy(ctx->exitstring, exit_string, EXIT_STRING_MAX_LENGTH);
+  } else {
+    fprintf(stderr,
+            "UART: Unable to copy exit string since its length is larger "
+            "than the maximum %d.\n",
+            EXIT_STRING_MAX_LENGTH);
+    // Initialise as a null string.
+    ctx->exitstring[0] = '\0';
+  }
+  // Guarantee that at least one character in the exit string is null.
+  ctx->exitstring[EXIT_STRING_MAX_LENGTH - 1] = '\0';
+
   return (void *)ctx;
 }
 
@@ -123,11 +142,11 @@ char uartdpi_read(void *ctx_void) {
   return ctx->tmp_read;
 }
 
-void uartdpi_write(void *ctx_void, char c) {
+int uartdpi_write(void *ctx_void, char c) {
   int rv;
   struct uartdpi_ctx *ctx = (struct uartdpi_ctx *)ctx_void;
   if (ctx == NULL) {
-    return;
+    return 0;
   }
 
   rv = write(ctx->host, &c, 1);
@@ -143,4 +162,36 @@ void uartdpi_write(void *ctx_void, char c) {
       fprintf(stderr, "UART: Write to log file failed: %s\n", strerror(errno));
     }
   }
+
+  if (c == '\0') {
+    // If a null character is received the tracker is reset.
+    ctx->exittracker = 0;
+  } else {
+    // If it is not null compare with the exit string.
+    if (c == ctx->exitstring[ctx->exittracker]) {
+      // Track which character should match next.
+      ctx->exittracker++;
+    } else {
+      // If the failing character matches the first character of the exit string
+      // the tracker should be one.
+      if (c == ctx->exitstring[0]) {
+        ctx->exittracker = 1;
+      } else {
+        // Otherwise keep looking for the first character.
+        ctx->exittracker = 0;
+      }
+    }
+  }
+
+  // If we hit the max length or the next character in the exit string is null.
+  if (ctx->exittracker == EXIT_STRING_MAX_LENGTH ||
+      ctx->exitstring[ctx->exittracker] == '\0') {
+    // If exittracker is zero, exitstring is empty so we should not exit the
+    // simulator.
+    rv = ctx->exittracker;
+    ctx->exittracker = 0;
+    return rv;
+  }
+
+  return 0;
 }
diff --git a/uartdpi.h b/uartdpi.h
index 63834078..342f6b3c 100644
--- a/uartdpi.h
+++ b/uartdpi.h
@@ -9,11 +9,24 @@
 extern "C" {
 #endif
 
-void *uartdpi_create(const char *name, const char *log_file_path);
+// Set up the UART DPI and returns a context struct.
+// - name: The name of the UART which will be used for the log file.
+// - log_file_path: Path to where the log file should be stored.
+// - exit_string: When this string is written to UART DPI the simulation will
+//                exit. Exit feature is disabled when this is empty. It must
+//                also be less than EXIT_STRING_MAX_LENGTH including null
+//                character.
+void *uartdpi_create(const char *name, const char *log_file_path,
+                     const char *exit_string);
+// Close all the handles held by the UART DPI and frees the context.
 void uartdpi_close(void *ctx_void);
+// Does a read and returns whether a valid character was read.
 int uartdpi_can_read(void *ctx_void);
+// Returns the last successfully read character.
 char uartdpi_read(void *ctx_void);
-void uartdpi_write(void *ctx_void, char c);
+// Writes a character (c) to the host and the log file.
+// Returns non-zero when exit string has been seen.
+int uartdpi_write(void *ctx_void, char c);
 
 #ifdef __cplusplus
 }  // extern "C"
diff --git a/uartdpi.sv b/uartdpi.sv
index d476c519..230088a9 100644
--- a/uartdpi.sv
+++ b/uartdpi.sv
@@ -3,10 +3,11 @@
 // SPDX-License-Identifier: Apache-2.0
 
 module uartdpi #(
-  parameter integer BAUD = 'x,
-  parameter integer FREQ = 'x,
-  parameter string NAME = "uart0"
-)(
+  parameter integer BAUD        = 'x,
+  parameter integer FREQ        = 'x,
+  parameter string  NAME        = "uart0",
+  parameter string  EXIT_STRING = ""
+) (
   input  logic clk_i,
   input  logic rst_ni,
   input  bit   active,
@@ -21,7 +22,7 @@ module uartdpi #(
   localparam int CYCLES_PER_SYMBOL = FREQ / BAUD;
 
   import "DPI-C" function
-    chandle uartdpi_create(input string name, input string log_file_path);
+    chandle uartdpi_create(input string name, input string log_file_path, input string exit_string);
 
   import "DPI-C" function
     void uartdpi_close(input chandle ctx);
@@ -33,14 +34,14 @@ module uartdpi #(
     int uartdpi_can_read(input chandle ctx);
 
   import "DPI-C" function
-    void uartdpi_write(input chandle ctx, int data);
+    int uartdpi_write(input chandle ctx, int data);
 
   chandle ctx;
   string log_file_path = DEFAULT_LOG_FILE;
 
   function automatic void initialize();
     $value$plusargs({"UARTDPI_LOG_", NAME, "=%s"}, log_file_path);
-    ctx = uartdpi_create(NAME, log_file_path);
+    ctx = uartdpi_create(NAME, log_file_path, EXIT_STRING);
   endfunction
 
   initial begin
@@ -58,8 +59,8 @@ module uartdpi #(
 
   // TX
   reg txactive;
-  int  txcount;
-  int  txcyccount;
+  int txcount;
+  int txcyccount;
   reg [9:0] txsymbol;
   bit seen_reset;
 
@@ -133,7 +134,13 @@ module uartdpi #(
           if (rxcyccount == CYCLES_PER_SYMBOL - 1) begin
             rxactive <= 0;
             if (rx_i) begin
-              uartdpi_write(ctx, rxsymbol);
+              // Write a message through the uart (using the uartdpi DPI library). By default, this
+              // always returns 0 but it can be configured to return 1 if it sees a particular
+              // string (the "EXIT_STRING"). If that happens, stop the simulation.
+              if(uartdpi_write(ctx, rxsymbol) != 0) begin
+                $display("Exiting the simulator because the magic UART string was seen.");
+                $finish(0);
+              end
             end
           end
         end
