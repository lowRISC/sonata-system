diff --git a/rtl/uart.sv b/rtl/uart.sv
index f911047..4c7b8c1 100644
--- a/rtl/uart.sv
+++ b/rtl/uart.sv
@@ -6,11 +6,7 @@
 
 `include "prim_assert.sv"
 
-module uart
-    import uart_reg_pkg::*;
-#(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}}
-) (
+module uart import uart_reg_pkg::*; (
   input           clk_i,
   input           rst_ni,
 
@@ -18,10 +14,6 @@ module uart
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // Generic IO
   input           cio_rx_i,
   output logic    cio_tx_o,
@@ -38,7 +30,6 @@ module uart
   output logic    intr_rx_parity_err_o
 );
 
-  logic [NumAlerts-1:0] alert_test, alerts;
   uart_reg2hw_t reg2hw;
   uart_hw2reg_t hw2reg;
 
@@ -48,9 +39,7 @@ module uart
     .tl_i,
     .tl_o,
     .reg2hw,
-    .hw2reg,
-    // SEC_CM: BUS.INTEGRITY
-    .intg_err_o (alerts[0])
+    .hw2reg
   );
 
   uart_core uart_core (
@@ -72,28 +61,6 @@ module uart
     .intr_rx_parity_err_o
   );
 
-  // Alerts
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   // always enable the driving out of TX
   assign cio_tx_en_o = 1'b1;
 
@@ -101,9 +68,6 @@ module uart
   `ASSERT(TxEnIsOne_A, cio_tx_en_o === 1'b1)
   `ASSERT_KNOWN(TxKnown_A, cio_tx_o, clk_i, !rst_ni || !cio_tx_en_o)
 
-  // Assert Known for alerts
-  `ASSERT_KNOWN(AlertsKnown_A, alert_tx_o)
-
   // Assert Known for interrupts
   `ASSERT_KNOWN(TxWatermarkKnown_A, intr_tx_watermark_o)
   `ASSERT_KNOWN(RxWatermarkKnown_A, intr_rx_watermark_o)
@@ -113,7 +77,4 @@ module uart
   `ASSERT_KNOWN(RxBreakErrKnown_A, intr_rx_break_err_o)
   `ASSERT_KNOWN(RxTimeoutKnown_A, intr_rx_timeout_o)
   `ASSERT_KNOWN(RxParityErrKnown_A, intr_rx_parity_err_o)
-
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule
diff --git a/rtl/uart_core.sv b/rtl/uart_core.sv
index 3dec6c7..d55c20f 100644
--- a/rtl/uart_core.sv
+++ b/rtl/uart_core.sv
@@ -155,7 +155,7 @@ module uart_core (
   assign hw2reg.fifo_ctrl.rxilvl.de = 1'b0;
   assign hw2reg.fifo_ctrl.rxilvl.d  = 3'h0;
   assign hw2reg.fifo_ctrl.txilvl.de = 1'b0;
-  assign hw2reg.fifo_ctrl.txilvl.d  = 2'h0;
+  assign hw2reg.fifo_ctrl.txilvl.d  = 3'h0;
 
   //              NCO 16x Baud Generator
   // output clock rate is:
@@ -193,8 +193,7 @@ module uart_core (
     .full_o (),
     .rvalid_o(tx_fifo_rvalid),
     .rready_i(tx_fifo_rready),
-    .rdata_o (tx_fifo_data),
-    .err_o   ()
+    .rdata_o (tx_fifo_data)
   );
 
   uart_tx uart_tx (
@@ -294,8 +293,7 @@ module uart_core (
     .full_o (),
     .rvalid_o(rx_fifo_rvalid),
     .rready_i(reg2hw.rdata.re),
-    .rdata_o (uart_rdata),
-    .err_o   ()
+    .rdata_o (uart_rdata)
   );
 
   always_ff @(posedge clk_i or negedge rst_ni) begin
@@ -390,7 +388,7 @@ module uart_core (
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
       rx_timeout_count_q   <= 24'd0;
-      rx_fifo_depth_prev_q <= 6'd0;
+      rx_fifo_depth_prev_q <= 8'd0;
     end else begin
       rx_timeout_count_q    <= rx_timeout_count_d;
       rx_fifo_depth_prev_q  <= rx_fifo_depth;
diff --git a/rtl/uart_reg_top.sv b/rtl/uart_reg_top.sv
index f468d26..50054b7 100644
--- a/rtl/uart_reg_top.sv
+++ b/rtl/uart_reg_top.sv
@@ -13,10 +13,7 @@ module uart_reg_top (
   output tlul_pkg::tl_d2h_t tl_o,
   // To HW
   output uart_reg_pkg::uart_reg2hw_t reg2hw, // Write
-  input  uart_reg_pkg::uart_hw2reg_t hw2reg, // Read
-
-  // Integrity check errors
-  output logic intg_err_o
+  input  uart_reg_pkg::uart_hw2reg_t hw2reg  // Read
 );
 
   import uart_reg_pkg::* ;
@@ -42,40 +39,6 @@ module uart_reg_top (
   tlul_pkg::tl_h2d_t tl_reg_h2d;
   tlul_pkg::tl_d2h_t tl_reg_d2h;
 
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  // also check for spurious write enables
-  logic reg_we_err;
-  logic [12:0] reg_we_check;
-  prim_reg_we_check #(
-    .OneHotWidth(13)
-  ) u_prim_reg_we_check (
-    .clk_i(clk_i),
-    .rst_ni(rst_ni),
-    .oh_i  (reg_we_check),
-    .en_i  (reg_we && !addrmiss),
-    .err_o (reg_we_err)
-  );
-
-  logic err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      err_q <= '0;
-    end else if (intg_err || reg_we_err) begin
-      err_q <= 1'b1;
-    end
-  end
-
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = err_q | intg_err | reg_we_err;
-
   // outgoing integrity generation
   tlul_pkg::tl_d2h_t tl_o_pre;
   tlul_rsp_intg_gen #(
@@ -116,7 +79,7 @@ module uart_reg_top (
   // cdc oversampling signals
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = addrmiss | wr_err | intg_err;
+  assign reg_error = addrmiss | wr_err;
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
@@ -225,8 +188,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessW1C),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_state_tx_watermark (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -242,7 +204,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_state.tx_watermark.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_state_tx_watermark_qs)
@@ -252,8 +213,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessW1C),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_state_rx_watermark (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -269,7 +229,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_state.rx_watermark.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_state_rx_watermark_qs)
@@ -279,8 +238,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessW1C),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_state_tx_empty (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -296,7 +254,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_state.tx_empty.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_state_tx_empty_qs)
@@ -306,8 +263,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessW1C),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_state_rx_overflow (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -323,7 +279,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_state.rx_overflow.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_state_rx_overflow_qs)
@@ -333,8 +288,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessW1C),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_state_rx_frame_err (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -350,7 +304,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_state.rx_frame_err.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_state_rx_frame_err_qs)
@@ -360,8 +313,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessW1C),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_state_rx_break_err (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -377,7 +329,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_state.rx_break_err.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_state_rx_break_err_qs)
@@ -387,8 +338,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessW1C),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_state_rx_timeout (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -404,7 +354,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_state.rx_timeout.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_state_rx_timeout_qs)
@@ -414,8 +363,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessW1C),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_state_rx_parity_err (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -431,7 +379,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_state.rx_parity_err.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_state_rx_parity_err_qs)
@@ -443,8 +390,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_enable_tx_watermark (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -460,7 +406,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_enable.tx_watermark.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_enable_tx_watermark_qs)
@@ -470,8 +415,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_enable_rx_watermark (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -487,7 +431,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_enable.rx_watermark.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_enable_rx_watermark_qs)
@@ -497,8 +440,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_enable_tx_empty (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -514,7 +456,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_enable.tx_empty.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_enable_tx_empty_qs)
@@ -524,8 +465,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_enable_rx_overflow (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -541,7 +481,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_enable.rx_overflow.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_enable_rx_overflow_qs)
@@ -551,8 +490,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_enable_rx_frame_err (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -568,7 +506,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_enable.rx_frame_err.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_enable_rx_frame_err_qs)
@@ -578,8 +515,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_enable_rx_break_err (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -595,7 +531,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_enable.rx_break_err.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_enable_rx_break_err_qs)
@@ -605,8 +540,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_enable_rx_timeout (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -622,7 +556,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_enable.rx_timeout.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_enable_rx_timeout_qs)
@@ -632,8 +565,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_intr_enable_rx_parity_err (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -649,7 +581,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.intr_enable.rx_parity_err.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (intr_enable_rx_parity_err_qs)
@@ -671,7 +602,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (intr_test_flds_we[0]),
     .q      (reg2hw.intr_test.tx_watermark.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.intr_test.tx_watermark.qe = intr_test_qe;
@@ -687,7 +617,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (intr_test_flds_we[1]),
     .q      (reg2hw.intr_test.rx_watermark.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.intr_test.rx_watermark.qe = intr_test_qe;
@@ -703,7 +632,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (intr_test_flds_we[2]),
     .q      (reg2hw.intr_test.tx_empty.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.intr_test.tx_empty.qe = intr_test_qe;
@@ -719,7 +647,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (intr_test_flds_we[3]),
     .q      (reg2hw.intr_test.rx_overflow.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.intr_test.rx_overflow.qe = intr_test_qe;
@@ -735,7 +662,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (intr_test_flds_we[4]),
     .q      (reg2hw.intr_test.rx_frame_err.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.intr_test.rx_frame_err.qe = intr_test_qe;
@@ -751,7 +677,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (intr_test_flds_we[5]),
     .q      (reg2hw.intr_test.rx_break_err.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.intr_test.rx_break_err.qe = intr_test_qe;
@@ -767,7 +692,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (intr_test_flds_we[6]),
     .q      (reg2hw.intr_test.rx_timeout.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.intr_test.rx_timeout.qe = intr_test_qe;
@@ -783,7 +707,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (intr_test_flds_we[7]),
     .q      (reg2hw.intr_test.rx_parity_err.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.intr_test.rx_parity_err.qe = intr_test_qe;
@@ -803,7 +726,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (alert_test_flds_we[0]),
     .q      (reg2hw.alert_test.q),
-    .ds     (),
     .qs     ()
   );
   assign reg2hw.alert_test.qe = alert_test_qe;
@@ -814,8 +736,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ctrl_tx (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -831,7 +752,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.tx.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_tx_qs)
@@ -841,8 +761,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ctrl_rx (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -858,7 +777,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.rx.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_rx_qs)
@@ -868,8 +786,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ctrl_nf (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -885,7 +802,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.nf.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_nf_qs)
@@ -895,8 +811,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ctrl_slpbk (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -912,7 +827,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.slpbk.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_slpbk_qs)
@@ -922,8 +836,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ctrl_llpbk (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -939,7 +852,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.llpbk.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_llpbk_qs)
@@ -949,8 +861,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ctrl_parity_en (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -966,7 +877,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.parity_en.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_parity_en_qs)
@@ -976,8 +886,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ctrl_parity_odd (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -993,7 +902,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.parity_odd.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_parity_odd_qs)
@@ -1003,8 +911,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (2),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (2'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (2'h0)
   ) u_ctrl_rxblvl (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1020,7 +927,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.rxblvl.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_rxblvl_qs)
@@ -1030,8 +936,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (16),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (16'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (16'h0)
   ) u_ctrl_nco (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1047,7 +952,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ctrl.nco.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ctrl_nco_qs)
@@ -1066,7 +970,6 @@ module uart_reg_top (
     .qre    (reg2hw.status.txfull.re),
     .qe     (),
     .q      (reg2hw.status.txfull.q),
-    .ds     (),
     .qs     (status_txfull_qs)
   );
 
@@ -1081,7 +984,6 @@ module uart_reg_top (
     .qre    (reg2hw.status.rxfull.re),
     .qe     (),
     .q      (reg2hw.status.rxfull.q),
-    .ds     (),
     .qs     (status_rxfull_qs)
   );
 
@@ -1096,7 +998,6 @@ module uart_reg_top (
     .qre    (reg2hw.status.txempty.re),
     .qe     (),
     .q      (reg2hw.status.txempty.q),
-    .ds     (),
     .qs     (status_txempty_qs)
   );
 
@@ -1111,7 +1012,6 @@ module uart_reg_top (
     .qre    (reg2hw.status.txidle.re),
     .qe     (),
     .q      (reg2hw.status.txidle.q),
-    .ds     (),
     .qs     (status_txidle_qs)
   );
 
@@ -1126,7 +1026,6 @@ module uart_reg_top (
     .qre    (reg2hw.status.rxidle.re),
     .qe     (),
     .q      (reg2hw.status.rxidle.q),
-    .ds     (),
     .qs     (status_rxidle_qs)
   );
 
@@ -1141,7 +1040,6 @@ module uart_reg_top (
     .qre    (reg2hw.status.rxempty.re),
     .qe     (),
     .q      (reg2hw.status.rxempty.q),
-    .ds     (),
     .qs     (status_rxempty_qs)
   );
 
@@ -1157,7 +1055,6 @@ module uart_reg_top (
     .qre    (reg2hw.rdata.re),
     .qe     (),
     .q      (reg2hw.rdata.q),
-    .ds     (),
     .qs     (rdata_qs)
   );
 
@@ -1177,8 +1074,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (8),
     .SwAccess(prim_subreg_pkg::SwAccessWO),
-    .RESVAL  (8'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (8'h0)
   ) u_wdata (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1194,7 +1090,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (wdata_flds_we[0]),
     .q      (reg2hw.wdata.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     ()
@@ -1218,8 +1113,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessWO),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_fifo_ctrl_rxrst (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1235,7 +1129,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (fifo_ctrl_flds_we[0]),
     .q      (reg2hw.fifo_ctrl.rxrst.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     ()
@@ -1246,8 +1139,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessWO),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_fifo_ctrl_txrst (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1263,7 +1155,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (fifo_ctrl_flds_we[1]),
     .q      (reg2hw.fifo_ctrl.txrst.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     ()
@@ -1274,8 +1165,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (3),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (3'h0)
   ) u_fifo_ctrl_rxilvl (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1291,7 +1181,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (fifo_ctrl_flds_we[2]),
     .q      (reg2hw.fifo_ctrl.rxilvl.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (fifo_ctrl_rxilvl_qs)
@@ -1302,8 +1191,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (3),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (3'h0)
   ) u_fifo_ctrl_txilvl (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1319,7 +1207,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (fifo_ctrl_flds_we[3]),
     .q      (reg2hw.fifo_ctrl.txilvl.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (fifo_ctrl_txilvl_qs)
@@ -1339,7 +1226,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (fifo_status_txlvl_qs)
   );
 
@@ -1354,7 +1240,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (fifo_status_rxlvl_qs)
   );
 
@@ -1364,8 +1249,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ovrd_txen (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1381,7 +1265,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ovrd.txen.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ovrd_txen_qs)
@@ -1391,8 +1274,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_ovrd_txval (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1408,7 +1290,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.ovrd.txval.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (ovrd_txval_qs)
@@ -1426,7 +1307,6 @@ module uart_reg_top (
     .qre    (),
     .qe     (),
     .q      (),
-    .ds     (),
     .qs     (val_qs)
   );
 
@@ -1436,8 +1316,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (24),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (24'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (24'h0)
   ) u_timeout_ctrl_val (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1453,7 +1332,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.timeout_ctrl.val.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (timeout_ctrl_val_qs)
@@ -1463,8 +1341,7 @@ module uart_reg_top (
   prim_subreg #(
     .DW      (1),
     .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (1'h0),
-    .Mubi    (1'b0)
+    .RESVAL  (1'h0)
   ) u_timeout_ctrl_en (
     .clk_i   (clk_i),
     .rst_ni  (rst_ni),
@@ -1480,7 +1357,6 @@ module uart_reg_top (
     // to internal hardware
     .qe     (),
     .q      (reg2hw.timeout_ctrl.en.q),
-    .ds     (),
 
     // to register interface (read)
     .qs     (timeout_ctrl_en_qs)
@@ -1627,24 +1503,6 @@ module uart_reg_top (
 
   assign timeout_ctrl_en_wd = reg_wdata[31];
 
-  // Assign write-enables to checker logic vector.
-  always_comb begin
-    reg_we_check = '0;
-    reg_we_check[0] = intr_state_we;
-    reg_we_check[1] = intr_enable_we;
-    reg_we_check[2] = intr_test_we;
-    reg_we_check[3] = alert_test_we;
-    reg_we_check[4] = ctrl_we;
-    reg_we_check[5] = 1'b0;
-    reg_we_check[6] = 1'b0;
-    reg_we_check[7] = wdata_we;
-    reg_we_check[8] = fifo_ctrl_we;
-    reg_we_check[9] = 1'b0;
-    reg_we_check[10] = ovrd_we;
-    reg_we_check[11] = 1'b0;
-    reg_we_check[12] = timeout_ctrl_we;
-  end
-
   // Read data return
   always_comb begin
     reg_rdata_next = '0;
