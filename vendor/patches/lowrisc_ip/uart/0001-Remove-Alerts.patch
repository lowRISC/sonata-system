diff --git a/rtl/uart.sv b/rtl/uart.sv
index f911047..4c7b8c1 100644
--- a/rtl/uart.sv
+++ b/rtl/uart.sv
@@ -6,11 +6,7 @@
 
 `include "prim_assert.sv"
 
-module uart
-    import uart_reg_pkg::*;
-#(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}}
-) (
+module uart import uart_reg_pkg::*; (
   input           clk_i,
   input           rst_ni,
 
@@ -18,10 +14,6 @@ module uart
   input  tlul_pkg::tl_h2d_t tl_i,
   output tlul_pkg::tl_d2h_t tl_o,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // Generic IO
   input           cio_rx_i,
   output logic    cio_tx_o,
@@ -38,7 +30,6 @@ module uart
   output logic    intr_rx_parity_err_o
 );
 
-  logic [NumAlerts-1:0] alert_test, alerts;
   uart_reg2hw_t reg2hw;
   uart_hw2reg_t hw2reg;
 
@@ -48,9 +39,9 @@ module uart
     .tl_i,
     .tl_o,
     .reg2hw,
     .hw2reg,
     // SEC_CM: BUS.INTEGRITY
-    .intg_err_o (alerts[0])
+    .intg_err_o ()
   );
 
   uart_core uart_core (
@@ -72,28 +63,6 @@ module uart
     .intr_rx_parity_err_o
   );
 
-  // Alerts
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   // always enable the driving out of TX
   assign cio_tx_en_o = 1'b1;
 
@@ -101,9 +70,6 @@ module uart
   `ASSERT(TxEnIsOne_A, cio_tx_en_o === 1'b1)
   `ASSERT_KNOWN(TxKnown_A, cio_tx_o, clk_i, !rst_ni || !cio_tx_en_o)
 
-  // Assert Known for alerts
-  `ASSERT_KNOWN(AlertsKnown_A, alert_tx_o)
-
   // Assert Known for interrupts
   `ASSERT_KNOWN(TxWatermarkKnown_A, intr_tx_watermark_o)
   `ASSERT_KNOWN(RxWatermarkKnown_A, intr_rx_watermark_o)
@@ -113,7 +79,4 @@ module uart
   `ASSERT_KNOWN(RxBreakErrKnown_A, intr_rx_break_err_o)
   `ASSERT_KNOWN(RxTimeoutKnown_A, intr_rx_timeout_o)
   `ASSERT_KNOWN(RxParityErrKnown_A, intr_rx_parity_err_o)
-
-  // Alert assertions for reg_we onehot check
-  `ASSERT_PRIM_REG_WE_ONEHOT_ERROR_TRIGGER_ALERT(RegWeOnehotCheck_A, u_reg, alert_tx_o[0])
 endmodule
