// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package rv_plic_reg_pkg;

  // Param list
  parameter int NumSrc = 32;
  parameter int NumTarget = 1;
  parameter int PrioWidth = 2;
  parameter int NumAlerts = 1;

  // Address widths within the block
  parameter int BlockAw = 27;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio0_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio1_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio2_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio3_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio4_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio5_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio6_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio7_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio8_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio9_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio10_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio11_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio12_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio13_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio14_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio15_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio16_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio17_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio18_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio19_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio20_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio21_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio22_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio23_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio24_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio25_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio26_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio27_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio28_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio29_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio30_reg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_prio31_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_ie0_mreg_t;

  typedef struct packed {
    logic [1:0]  q;
  } rv_plic_reg2hw_threshold0_reg_t;

  typedef struct packed {
    logic [4:0]  q;
    logic        qe;
    logic        re;
  } rv_plic_reg2hw_cc0_reg_t;

  typedef struct packed {
    logic        q;
  } rv_plic_reg2hw_msip0_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } rv_plic_hw2reg_ip_mreg_t;

  typedef struct packed {
    logic [4:0]  d;
  } rv_plic_hw2reg_cc0_reg_t;

  // Register -> HW type
  typedef struct packed {
    rv_plic_reg2hw_prio0_reg_t prio0; // [105:104]
    rv_plic_reg2hw_prio1_reg_t prio1; // [103:102]
    rv_plic_reg2hw_prio2_reg_t prio2; // [101:100]
    rv_plic_reg2hw_prio3_reg_t prio3; // [99:98]
    rv_plic_reg2hw_prio4_reg_t prio4; // [97:96]
    rv_plic_reg2hw_prio5_reg_t prio5; // [95:94]
    rv_plic_reg2hw_prio6_reg_t prio6; // [93:92]
    rv_plic_reg2hw_prio7_reg_t prio7; // [91:90]
    rv_plic_reg2hw_prio8_reg_t prio8; // [89:88]
    rv_plic_reg2hw_prio9_reg_t prio9; // [87:86]
    rv_plic_reg2hw_prio10_reg_t prio10; // [85:84]
    rv_plic_reg2hw_prio11_reg_t prio11; // [83:82]
    rv_plic_reg2hw_prio12_reg_t prio12; // [81:80]
    rv_plic_reg2hw_prio13_reg_t prio13; // [79:78]
    rv_plic_reg2hw_prio14_reg_t prio14; // [77:76]
    rv_plic_reg2hw_prio15_reg_t prio15; // [75:74]
    rv_plic_reg2hw_prio16_reg_t prio16; // [73:72]
    rv_plic_reg2hw_prio17_reg_t prio17; // [71:70]
    rv_plic_reg2hw_prio18_reg_t prio18; // [69:68]
    rv_plic_reg2hw_prio19_reg_t prio19; // [67:66]
    rv_plic_reg2hw_prio20_reg_t prio20; // [65:64]
    rv_plic_reg2hw_prio21_reg_t prio21; // [63:62]
    rv_plic_reg2hw_prio22_reg_t prio22; // [61:60]
    rv_plic_reg2hw_prio23_reg_t prio23; // [59:58]
    rv_plic_reg2hw_prio24_reg_t prio24; // [57:56]
    rv_plic_reg2hw_prio25_reg_t prio25; // [55:54]
    rv_plic_reg2hw_prio26_reg_t prio26; // [53:52]
    rv_plic_reg2hw_prio27_reg_t prio27; // [51:50]
    rv_plic_reg2hw_prio28_reg_t prio28; // [49:48]
    rv_plic_reg2hw_prio29_reg_t prio29; // [47:46]
    rv_plic_reg2hw_prio30_reg_t prio30; // [45:44]
    rv_plic_reg2hw_prio31_reg_t prio31; // [43:42]
    rv_plic_reg2hw_ie0_mreg_t [31:0] ie0; // [41:10]
    rv_plic_reg2hw_threshold0_reg_t threshold0; // [9:8]
    rv_plic_reg2hw_cc0_reg_t cc0; // [7:1]
    rv_plic_reg2hw_msip0_reg_t msip0; // [0:0]
  } rv_plic_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    rv_plic_hw2reg_ip_mreg_t [31:0] ip; // [68:5]
    rv_plic_hw2reg_cc0_reg_t cc0; // [4:0]
  } rv_plic_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO0_OFFSET = 27'h 0;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO1_OFFSET = 27'h 4;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO2_OFFSET = 27'h 8;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO3_OFFSET = 27'h c;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO4_OFFSET = 27'h 10;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO5_OFFSET = 27'h 14;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO6_OFFSET = 27'h 18;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO7_OFFSET = 27'h 1c;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO8_OFFSET = 27'h 20;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO9_OFFSET = 27'h 24;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO10_OFFSET = 27'h 28;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO11_OFFSET = 27'h 2c;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO12_OFFSET = 27'h 30;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO13_OFFSET = 27'h 34;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO14_OFFSET = 27'h 38;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO15_OFFSET = 27'h 3c;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO16_OFFSET = 27'h 40;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO17_OFFSET = 27'h 44;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO18_OFFSET = 27'h 48;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO19_OFFSET = 27'h 4c;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO20_OFFSET = 27'h 50;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO21_OFFSET = 27'h 54;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO22_OFFSET = 27'h 58;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO23_OFFSET = 27'h 5c;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO24_OFFSET = 27'h 60;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO25_OFFSET = 27'h 64;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO26_OFFSET = 27'h 68;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO27_OFFSET = 27'h 6c;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO28_OFFSET = 27'h 70;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO29_OFFSET = 27'h 74;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO30_OFFSET = 27'h 78;
  parameter logic [BlockAw-1:0] RV_PLIC_PRIO31_OFFSET = 27'h 7c;
  parameter logic [BlockAw-1:0] RV_PLIC_IP_OFFSET = 27'h 1000;
  parameter logic [BlockAw-1:0] RV_PLIC_IE0_OFFSET = 27'h 2000;
  parameter logic [BlockAw-1:0] RV_PLIC_THRESHOLD0_OFFSET = 27'h 200000;
  parameter logic [BlockAw-1:0] RV_PLIC_CC0_OFFSET = 27'h 200004;
  parameter logic [BlockAw-1:0] RV_PLIC_MSIP0_OFFSET = 27'h 4000000;

  // Reset values for hwext registers and their fields
  parameter logic [4:0] RV_PLIC_CC0_RESVAL = 5'h 0;

  // Register index
  typedef enum int {
    RV_PLIC_PRIO0,
    RV_PLIC_PRIO1,
    RV_PLIC_PRIO2,
    RV_PLIC_PRIO3,
    RV_PLIC_PRIO4,
    RV_PLIC_PRIO5,
    RV_PLIC_PRIO6,
    RV_PLIC_PRIO7,
    RV_PLIC_PRIO8,
    RV_PLIC_PRIO9,
    RV_PLIC_PRIO10,
    RV_PLIC_PRIO11,
    RV_PLIC_PRIO12,
    RV_PLIC_PRIO13,
    RV_PLIC_PRIO14,
    RV_PLIC_PRIO15,
    RV_PLIC_PRIO16,
    RV_PLIC_PRIO17,
    RV_PLIC_PRIO18,
    RV_PLIC_PRIO19,
    RV_PLIC_PRIO20,
    RV_PLIC_PRIO21,
    RV_PLIC_PRIO22,
    RV_PLIC_PRIO23,
    RV_PLIC_PRIO24,
    RV_PLIC_PRIO25,
    RV_PLIC_PRIO26,
    RV_PLIC_PRIO27,
    RV_PLIC_PRIO28,
    RV_PLIC_PRIO29,
    RV_PLIC_PRIO30,
    RV_PLIC_PRIO31,
    RV_PLIC_IP,
    RV_PLIC_IE0,
    RV_PLIC_THRESHOLD0,
    RV_PLIC_CC0,
    RV_PLIC_MSIP0
  } rv_plic_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] RV_PLIC_PERMIT [37] = '{
    4'b 0001, // index[ 0] RV_PLIC_PRIO0
    4'b 0001, // index[ 1] RV_PLIC_PRIO1
    4'b 0001, // index[ 2] RV_PLIC_PRIO2
    4'b 0001, // index[ 3] RV_PLIC_PRIO3
    4'b 0001, // index[ 4] RV_PLIC_PRIO4
    4'b 0001, // index[ 5] RV_PLIC_PRIO5
    4'b 0001, // index[ 6] RV_PLIC_PRIO6
    4'b 0001, // index[ 7] RV_PLIC_PRIO7
    4'b 0001, // index[ 8] RV_PLIC_PRIO8
    4'b 0001, // index[ 9] RV_PLIC_PRIO9
    4'b 0001, // index[10] RV_PLIC_PRIO10
    4'b 0001, // index[11] RV_PLIC_PRIO11
    4'b 0001, // index[12] RV_PLIC_PRIO12
    4'b 0001, // index[13] RV_PLIC_PRIO13
    4'b 0001, // index[14] RV_PLIC_PRIO14
    4'b 0001, // index[15] RV_PLIC_PRIO15
    4'b 0001, // index[16] RV_PLIC_PRIO16
    4'b 0001, // index[17] RV_PLIC_PRIO17
    4'b 0001, // index[18] RV_PLIC_PRIO18
    4'b 0001, // index[19] RV_PLIC_PRIO19
    4'b 0001, // index[20] RV_PLIC_PRIO20
    4'b 0001, // index[21] RV_PLIC_PRIO21
    4'b 0001, // index[22] RV_PLIC_PRIO22
    4'b 0001, // index[23] RV_PLIC_PRIO23
    4'b 0001, // index[24] RV_PLIC_PRIO24
    4'b 0001, // index[25] RV_PLIC_PRIO25
    4'b 0001, // index[26] RV_PLIC_PRIO26
    4'b 0001, // index[27] RV_PLIC_PRIO27
    4'b 0001, // index[28] RV_PLIC_PRIO28
    4'b 0001, // index[29] RV_PLIC_PRIO29
    4'b 0001, // index[30] RV_PLIC_PRIO30
    4'b 0001, // index[31] RV_PLIC_PRIO31
    4'b 1111, // index[32] RV_PLIC_IP
    4'b 1111, // index[33] RV_PLIC_IE0
    4'b 0001, // index[34] RV_PLIC_THRESHOLD0
    4'b 0001, // index[35] RV_PLIC_CC0
    4'b 0001  // index[36] RV_PLIC_MSIP0
  };

endpackage
