// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package rev_ctl_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } rev_ctl_reg2hw_start_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } rev_ctl_reg2hw_end_addr_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } rev_ctl_reg2hw_go_reg_t;

  typedef struct packed {
    struct packed {
      logic [30:0] q;
    } epoch;
    struct packed {
      logic        q;
    } running;
  } rev_ctl_reg2hw_epoch_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } rev_ctl_reg2hw_interrupt_status_reg_t;

  typedef struct packed {
    logic        q;
  } rev_ctl_reg2hw_interrupt_enable_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } rev_ctl_hw2reg_go_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } running;
    struct packed {
      logic [30:0] d;
      logic        de;
    } epoch;
  } rev_ctl_hw2reg_epoch_reg_t;

  typedef struct packed {
    logic        d;
  } rev_ctl_hw2reg_interrupt_status_reg_t;

  // Register -> HW type
  typedef struct packed {
    rev_ctl_reg2hw_start_addr_reg_t start_addr; // [131:100]
    rev_ctl_reg2hw_end_addr_reg_t end_addr; // [99:68]
    rev_ctl_reg2hw_go_reg_t go; // [67:35]
    rev_ctl_reg2hw_epoch_reg_t epoch; // [34:3]
    rev_ctl_reg2hw_interrupt_status_reg_t interrupt_status; // [2:1]
    rev_ctl_reg2hw_interrupt_enable_reg_t interrupt_enable; // [0:0]
  } rev_ctl_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    rev_ctl_hw2reg_go_reg_t go; // [66:35]
    rev_ctl_hw2reg_epoch_reg_t epoch; // [34:1]
    rev_ctl_hw2reg_interrupt_status_reg_t interrupt_status; // [0:0]
  } rev_ctl_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] REV_CTL_START_ADDR_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] REV_CTL_END_ADDR_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] REV_CTL_GO_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] REV_CTL_EPOCH_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] REV_CTL_INTERRUPT_STATUS_OFFSET = 5'h 10;
  parameter logic [BlockAw-1:0] REV_CTL_INTERRUPT_ENABLE_OFFSET = 5'h 14;

  // Reset values for hwext registers and their fields
  parameter logic [31:0] REV_CTL_GO_RESVAL = 32'h 55000000;
  parameter logic [31:0] REV_CTL_GO_GO_RESVAL = 32'h 55000000;
  parameter logic [0:0] REV_CTL_INTERRUPT_STATUS_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    REV_CTL_START_ADDR,
    REV_CTL_END_ADDR,
    REV_CTL_GO,
    REV_CTL_EPOCH,
    REV_CTL_INTERRUPT_STATUS,
    REV_CTL_INTERRUPT_ENABLE
  } rev_ctl_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] REV_CTL_PERMIT [6] = '{
    4'b 1111, // index[0] REV_CTL_START_ADDR
    4'b 1111, // index[1] REV_CTL_END_ADDR
    4'b 1111, // index[2] REV_CTL_GO
    4'b 1111, // index[3] REV_CTL_EPOCH
    4'b 0001, // index[4] REV_CTL_INTERRUPT_STATUS
    4'b 0001  // index[5] REV_CTL_INTERRUPT_ENABLE
  };

endpackage
