// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package spi_reg_pkg;

  // Param list
  parameter int MaxPeripherals = 4;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } complete;
    struct packed {
      logic        q;
    } tx_watermark;
    struct packed {
      logic        q;
    } tx_empty;
    struct packed {
      logic        q;
    } rx_watermark;
    struct packed {
      logic        q;
    } rx_full;
  } spi_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } complete;
    struct packed {
      logic        q;
    } tx_watermark;
    struct packed {
      logic        q;
    } tx_empty;
    struct packed {
      logic        q;
    } rx_watermark;
    struct packed {
      logic        q;
    } rx_full;
  } spi_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } complete;
    struct packed {
      logic        q;
      logic        qe;
    } tx_watermark;
    struct packed {
      logic        q;
      logic        qe;
    } tx_empty;
    struct packed {
      logic        q;
      logic        qe;
    } rx_watermark;
    struct packed {
      logic        q;
      logic        qe;
    } rx_full;
  } spi_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } cpol;
    struct packed {
      logic        q;
    } cpha;
    struct packed {
      logic        q;
    } msb_first;
    struct packed {
      logic [15:0] q;
    } half_clk_period;
  } spi_reg2hw_cfg_reg_t;

  typedef struct packed {
    struct packed {
      logic [3:0]  q;
      logic        qe;
    } rx_watermark;
    struct packed {
      logic [3:0]  q;
      logic        qe;
    } tx_watermark;
    struct packed {
      logic        q;
      logic        qe;
    } rx_enable;
    struct packed {
      logic        q;
      logic        qe;
    } tx_enable;
    struct packed {
      logic        q;
      logic        qe;
    } rx_clear;
    struct packed {
      logic        q;
      logic        qe;
    } tx_clear;
  } spi_reg2hw_control_reg_t;

  typedef struct packed {
    logic [10:0] q;
    logic        qe;
  } spi_reg2hw_start_reg_t;

  typedef struct packed {
    logic [7:0]  q;
    logic        re;
  } spi_reg2hw_rx_fifo_reg_t;

  typedef struct packed {
    logic [7:0]  q;
    logic        qe;
  } spi_reg2hw_tx_fifo_reg_t;

  typedef struct packed {
    logic        q;
  } spi_reg2hw_cs_mreg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } rx_full;
    struct packed {
      logic        d;
      logic        de;
    } rx_watermark;
    struct packed {
      logic        d;
      logic        de;
    } tx_empty;
    struct packed {
      logic        d;
      logic        de;
    } tx_watermark;
    struct packed {
      logic        d;
      logic        de;
    } complete;
  } spi_hw2reg_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
    } tx_fifo_level;
    struct packed {
      logic [7:0]  d;
    } rx_fifo_level;
    struct packed {
      logic        d;
    } tx_fifo_full;
    struct packed {
      logic        d;
    } rx_fifo_empty;
    struct packed {
      logic        d;
    } idle;
  } spi_hw2reg_status_reg_t;

  typedef struct packed {
    logic [7:0]  d;
  } spi_hw2reg_rx_fifo_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
    } tx_fifo_depth;
    struct packed {
      logic [7:0]  d;
    } rx_fifo_depth;
  } spi_hw2reg_info_reg_t;

  // Register -> HW type
  typedef struct packed {
    spi_reg2hw_intr_state_reg_t intr_state; // [90:86]
    spi_reg2hw_intr_enable_reg_t intr_enable; // [85:81]
    spi_reg2hw_intr_test_reg_t intr_test; // [80:71]
    spi_reg2hw_cfg_reg_t cfg; // [70:52]
    spi_reg2hw_control_reg_t control; // [51:34]
    spi_reg2hw_start_reg_t start; // [33:22]
    spi_reg2hw_rx_fifo_reg_t rx_fifo; // [21:13]
    spi_reg2hw_tx_fifo_reg_t tx_fifo; // [12:4]
    spi_reg2hw_cs_mreg_t [3:0] cs; // [3:0]
  } spi_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    spi_hw2reg_intr_state_reg_t intr_state; // [52:43]
    spi_hw2reg_status_reg_t status; // [42:24]
    spi_hw2reg_rx_fifo_reg_t rx_fifo; // [23:16]
    spi_hw2reg_info_reg_t info; // [15:0]
  } spi_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SPI_INTR_STATE_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] SPI_INTR_ENABLE_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] SPI_INTR_TEST_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] SPI_CFG_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] SPI_CONTROL_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] SPI_STATUS_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] SPI_START_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] SPI_RX_FIFO_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] SPI_TX_FIFO_OFFSET = 6'h 20;
  parameter logic [BlockAw-1:0] SPI_INFO_OFFSET = 6'h 24;
  parameter logic [BlockAw-1:0] SPI_CS_OFFSET = 6'h 28;

  // Reset values for hwext registers and their fields
  parameter logic [4:0] SPI_INTR_TEST_RESVAL = 5'h 0;
  parameter logic [0:0] SPI_INTR_TEST_RX_FULL_RESVAL = 1'h 0;
  parameter logic [0:0] SPI_INTR_TEST_RX_WATERMARK_RESVAL = 1'h 0;
  parameter logic [0:0] SPI_INTR_TEST_TX_EMPTY_RESVAL = 1'h 0;
  parameter logic [0:0] SPI_INTR_TEST_TX_WATERMARK_RESVAL = 1'h 0;
  parameter logic [0:0] SPI_INTR_TEST_COMPLETE_RESVAL = 1'h 0;
  parameter logic [18:0] SPI_STATUS_RESVAL = 19'h 0;
  parameter logic [7:0] SPI_RX_FIFO_RESVAL = 8'h 0;
  parameter logic [15:0] SPI_INFO_RESVAL = 16'h 0;

  // Register index
  typedef enum int {
    SPI_INTR_STATE,
    SPI_INTR_ENABLE,
    SPI_INTR_TEST,
    SPI_CFG,
    SPI_CONTROL,
    SPI_STATUS,
    SPI_START,
    SPI_RX_FIFO,
    SPI_TX_FIFO,
    SPI_INFO,
    SPI_CS
  } spi_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SPI_PERMIT [11] = '{
    4'b 0001, // index[ 0] SPI_INTR_STATE
    4'b 0001, // index[ 1] SPI_INTR_ENABLE
    4'b 0001, // index[ 2] SPI_INTR_TEST
    4'b 1111, // index[ 3] SPI_CFG
    4'b 0011, // index[ 4] SPI_CONTROL
    4'b 0111, // index[ 5] SPI_STATUS
    4'b 0011, // index[ 6] SPI_START
    4'b 0001, // index[ 7] SPI_RX_FIFO
    4'b 0001, // index[ 8] SPI_TX_FIFO
    4'b 0011, // index[ 9] SPI_INFO
    4'b 0001  // index[10] SPI_CS
  };

endpackage
