// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rgbled_ctrl_reg_top (
  input clk_i,
  input rst_ni,
  // To HW
  output rgbled_ctrl_reg_pkg::rgbled_ctrl_reg2hw_t reg2hw, // Write
  input  rgbled_ctrl_reg_pkg::rgbled_ctrl_hw2reg_t hw2reg, // Read

  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o
);

  import rgbled_ctrl_reg_pkg::* ;

  localparam int AW = 4;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(0),
    .EnableDataIntgGen(0)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic rgbled0_we;
  logic [7:0] rgbled0_r_wd;
  logic [7:0] rgbled0_g_wd;
  logic [7:0] rgbled0_b_wd;
  logic rgbled1_we;
  logic [7:0] rgbled1_r_wd;
  logic [7:0] rgbled1_g_wd;
  logic [7:0] rgbled1_b_wd;
  logic ctrl_we;
  logic ctrl_setrgb_wd;
  logic ctrl_off_wd;
  logic status_re;
  logic status_qs;

  // Register instances
  // R[rgbled0]: V(True)
  logic rgbled0_qe;
  logic [2:0] rgbled0_flds_we;
  assign rgbled0_qe = &rgbled0_flds_we;
  //   F[r]: 7:0
  prim_subreg_ext #(
    .DW    (8)
  ) u_rgbled0_r (
    .re     (1'b0),
    .we     (rgbled0_we),
    .wd     (rgbled0_r_wd),
    .d      ('0),
    .qre    (),
    .qe     (rgbled0_flds_we[0]),
    .q      (reg2hw.rgbled0.r.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.rgbled0.r.qe = rgbled0_qe;

  //   F[g]: 15:8
  prim_subreg_ext #(
    .DW    (8)
  ) u_rgbled0_g (
    .re     (1'b0),
    .we     (rgbled0_we),
    .wd     (rgbled0_g_wd),
    .d      ('0),
    .qre    (),
    .qe     (rgbled0_flds_we[1]),
    .q      (reg2hw.rgbled0.g.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.rgbled0.g.qe = rgbled0_qe;

  //   F[b]: 23:16
  prim_subreg_ext #(
    .DW    (8)
  ) u_rgbled0_b (
    .re     (1'b0),
    .we     (rgbled0_we),
    .wd     (rgbled0_b_wd),
    .d      ('0),
    .qre    (),
    .qe     (rgbled0_flds_we[2]),
    .q      (reg2hw.rgbled0.b.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.rgbled0.b.qe = rgbled0_qe;


  // R[rgbled1]: V(True)
  logic rgbled1_qe;
  logic [2:0] rgbled1_flds_we;
  assign rgbled1_qe = &rgbled1_flds_we;
  //   F[r]: 7:0
  prim_subreg_ext #(
    .DW    (8)
  ) u_rgbled1_r (
    .re     (1'b0),
    .we     (rgbled1_we),
    .wd     (rgbled1_r_wd),
    .d      ('0),
    .qre    (),
    .qe     (rgbled1_flds_we[0]),
    .q      (reg2hw.rgbled1.r.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.rgbled1.r.qe = rgbled1_qe;

  //   F[g]: 15:8
  prim_subreg_ext #(
    .DW    (8)
  ) u_rgbled1_g (
    .re     (1'b0),
    .we     (rgbled1_we),
    .wd     (rgbled1_g_wd),
    .d      ('0),
    .qre    (),
    .qe     (rgbled1_flds_we[1]),
    .q      (reg2hw.rgbled1.g.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.rgbled1.g.qe = rgbled1_qe;

  //   F[b]: 23:16
  prim_subreg_ext #(
    .DW    (8)
  ) u_rgbled1_b (
    .re     (1'b0),
    .we     (rgbled1_we),
    .wd     (rgbled1_b_wd),
    .d      ('0),
    .qre    (),
    .qe     (rgbled1_flds_we[2]),
    .q      (reg2hw.rgbled1.b.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.rgbled1.b.qe = rgbled1_qe;


  // R[ctrl]: V(True)
  logic ctrl_qe;
  logic [1:0] ctrl_flds_we;
  assign ctrl_qe = &ctrl_flds_we;
  //   F[setrgb]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_setrgb (
    .re     (1'b0),
    .we     (ctrl_we),
    .wd     (ctrl_setrgb_wd),
    .d      ('0),
    .qre    (),
    .qe     (ctrl_flds_we[0]),
    .q      (reg2hw.ctrl.setrgb.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.ctrl.setrgb.qe = ctrl_qe;

  //   F[off]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_ctrl_off (
    .re     (1'b0),
    .we     (ctrl_we),
    .wd     (ctrl_off_wd),
    .d      ('0),
    .qre    (),
    .qe     (ctrl_flds_we[1]),
    .q      (reg2hw.ctrl.off.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.ctrl.off.qe = ctrl_qe;


  // R[status]: V(True)
  prim_subreg_ext #(
    .DW    (1)
  ) u_status (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_qs)
  );



  logic [3:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == RGBLED_CTRL_RGBLED0_OFFSET);
    addr_hit[1] = (reg_addr == RGBLED_CTRL_RGBLED1_OFFSET);
    addr_hit[2] = (reg_addr == RGBLED_CTRL_CTRL_OFFSET);
    addr_hit[3] = (reg_addr == RGBLED_CTRL_STATUS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(RGBLED_CTRL_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(RGBLED_CTRL_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(RGBLED_CTRL_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(RGBLED_CTRL_PERMIT[3] & ~reg_be)))));
  end

  // Generate write-enables
  assign rgbled0_we = addr_hit[0] & reg_we & !reg_error;

  assign rgbled0_r_wd = reg_wdata[7:0];

  assign rgbled0_g_wd = reg_wdata[15:8];

  assign rgbled0_b_wd = reg_wdata[23:16];
  assign rgbled1_we = addr_hit[1] & reg_we & !reg_error;

  assign rgbled1_r_wd = reg_wdata[7:0];

  assign rgbled1_g_wd = reg_wdata[15:8];

  assign rgbled1_b_wd = reg_wdata[23:16];
  assign ctrl_we = addr_hit[2] & reg_we & !reg_error;

  assign ctrl_setrgb_wd = reg_wdata[0];

  assign ctrl_off_wd = reg_wdata[1];
  assign status_re = addr_hit[3] & reg_re & !reg_error;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[7:0] = '0;
        reg_rdata_next[15:8] = '0;
        reg_rdata_next[23:16] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[7:0] = '0;
        reg_rdata_next[15:8] = '0;
        reg_rdata_next[23:16] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = status_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
