// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_peri module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// main
//   -> s1n_12
//     -> gpio
//     -> pinmux
//     -> system_info
//     -> rgbled_ctrl
//     -> hw_rev
//     -> xadc
//     -> timer
//     -> pwm0
//     -> uart0
//     -> uart1
//     -> uart2

module xbar_peri (
  input clk_sys_i,
  input rst_sys_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_main_i,
  output tlul_pkg::tl_d2h_t tl_main_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_gpio_o,
  input  tlul_pkg::tl_d2h_t tl_gpio_i,
  output tlul_pkg::tl_h2d_t tl_pinmux_o,
  input  tlul_pkg::tl_d2h_t tl_pinmux_i,
  output tlul_pkg::tl_h2d_t tl_rgbled_ctrl_o,
  input  tlul_pkg::tl_d2h_t tl_rgbled_ctrl_i,
  output tlul_pkg::tl_h2d_t tl_hw_rev_o,
  input  tlul_pkg::tl_d2h_t tl_hw_rev_i,
  output tlul_pkg::tl_h2d_t tl_xadc_o,
  input  tlul_pkg::tl_d2h_t tl_xadc_i,
  output tlul_pkg::tl_h2d_t tl_system_info_o,
  input  tlul_pkg::tl_d2h_t tl_system_info_i,
  output tlul_pkg::tl_h2d_t tl_timer_o,
  input  tlul_pkg::tl_d2h_t tl_timer_i,
  output tlul_pkg::tl_h2d_t tl_pwm0_o,
  input  tlul_pkg::tl_d2h_t tl_pwm0_i,
  output tlul_pkg::tl_h2d_t tl_uart0_o,
  input  tlul_pkg::tl_d2h_t tl_uart0_i,
  output tlul_pkg::tl_h2d_t tl_uart1_o,
  input  tlul_pkg::tl_d2h_t tl_uart1_i,
  output tlul_pkg::tl_h2d_t tl_uart2_o,
  input  tlul_pkg::tl_d2h_t tl_uart2_i,

  input prim_mubi_pkg::mubi4_t scanmode_i
);

  import tlul_pkg::*;
  import tl_peri_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = ^scanmode_i;

  tl_h2d_t tl_s1n_12_us_h2d ;
  tl_d2h_t tl_s1n_12_us_d2h ;


  tl_h2d_t tl_s1n_12_ds_h2d [11];
  tl_d2h_t tl_s1n_12_ds_d2h [11];

  // Create steering signal
  logic [3:0] dev_sel_s1n_12;



  assign tl_gpio_o = tl_s1n_12_ds_h2d[0];
  assign tl_s1n_12_ds_d2h[0] = tl_gpio_i;

  assign tl_pinmux_o = tl_s1n_12_ds_h2d[1];
  assign tl_s1n_12_ds_d2h[1] = tl_pinmux_i;

  assign tl_system_info_o = tl_s1n_12_ds_h2d[2];
  assign tl_s1n_12_ds_d2h[2] = tl_system_info_i;

  assign tl_rgbled_ctrl_o = tl_s1n_12_ds_h2d[3];
  assign tl_s1n_12_ds_d2h[3] = tl_rgbled_ctrl_i;

  assign tl_hw_rev_o = tl_s1n_12_ds_h2d[4];
  assign tl_s1n_12_ds_d2h[4] = tl_hw_rev_i;

  assign tl_xadc_o = tl_s1n_12_ds_h2d[5];
  assign tl_s1n_12_ds_d2h[5] = tl_xadc_i;

  assign tl_timer_o = tl_s1n_12_ds_h2d[6];
  assign tl_s1n_12_ds_d2h[6] = tl_timer_i;

  assign tl_pwm0_o = tl_s1n_12_ds_h2d[7];
  assign tl_s1n_12_ds_d2h[7] = tl_pwm0_i;

  assign tl_uart0_o = tl_s1n_12_ds_h2d[8];
  assign tl_s1n_12_ds_d2h[8] = tl_uart0_i;

  assign tl_uart1_o = tl_s1n_12_ds_h2d[9];
  assign tl_s1n_12_ds_d2h[9] = tl_uart1_i;

  assign tl_uart2_o = tl_s1n_12_ds_h2d[10];
  assign tl_s1n_12_ds_d2h[10] = tl_uart2_i;

  assign tl_s1n_12_us_h2d = tl_main_i;
  assign tl_main_o = tl_s1n_12_us_d2h;

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_12 = 4'd11;
    if ((tl_s1n_12_us_h2d.a_address &
         ~(ADDR_MASK_GPIO)) == ADDR_SPACE_GPIO) begin
      dev_sel_s1n_12 = 4'd0;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_PINMUX)) == ADDR_SPACE_PINMUX) begin
      dev_sel_s1n_12 = 4'd1;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_SYSTEM_INFO)) == ADDR_SPACE_SYSTEM_INFO) begin
      dev_sel_s1n_12 = 4'd2;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_RGBLED_CTRL)) == ADDR_SPACE_RGBLED_CTRL) begin
      dev_sel_s1n_12 = 4'd3;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_HW_REV)) == ADDR_SPACE_HW_REV) begin
      dev_sel_s1n_12 = 4'd4;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_XADC)) == ADDR_SPACE_XADC) begin
      dev_sel_s1n_12 = 4'd5;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_TIMER)) == ADDR_SPACE_TIMER) begin
      dev_sel_s1n_12 = 4'd6;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_PWM0)) == ADDR_SPACE_PWM0) begin
      dev_sel_s1n_12 = 4'd7;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_UART0)) == ADDR_SPACE_UART0) begin
      dev_sel_s1n_12 = 4'd8;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_UART1)) == ADDR_SPACE_UART1) begin
      dev_sel_s1n_12 = 4'd9;

    end else if ((tl_s1n_12_us_h2d.a_address &
                  ~(ADDR_MASK_UART2)) == ADDR_SPACE_UART2) begin
      dev_sel_s1n_12 = 4'd10;
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (44'h0),
    .DRspDepth (44'h0),
    .N         (11)
  ) u_s1n_12 (
    .clk_i        (clk_sys_i),
    .rst_ni       (rst_sys_ni),
    .tl_h_i       (tl_s1n_12_us_h2d),
    .tl_h_o       (tl_s1n_12_us_d2h),
    .tl_d_o       (tl_s1n_12_ds_h2d),
    .tl_d_i       (tl_s1n_12_ds_d2h),
    .dev_select_i (dev_sel_s1n_12)
  );

endmodule
