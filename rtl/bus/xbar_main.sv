// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// ibex_lsu
//   -> s1n_16
//     -> sm1_17
//       -> sram
//     -> sm1_18
//       -> hyperram
//     -> rev_tag
//     -> sm1_19
//       -> peri
//     -> spi_lcd
//     -> spi_ethmac
//     -> i2c0
//     -> i2c1
//     -> spi0
//     -> spi1
//     -> spi2
//     -> asf_20
//       -> usbdev
//     -> dbg_dev
//     -> rv_plic
// dbg_host
//   -> s1n_21
//     -> sm1_17
//       -> sram
//     -> sm1_18
//       -> hyperram
//     -> sm1_19
//       -> peri

module xbar_main (
  input clk_sys_i,
  input clk_usb_i,
  input rst_sys_ni,
  input rst_usb_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_ibex_lsu_i,
  output tlul_pkg::tl_d2h_t tl_ibex_lsu_o,
  input  tlul_pkg::tl_h2d_t tl_dbg_host_i,
  output tlul_pkg::tl_d2h_t tl_dbg_host_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_sram_o,
  input  tlul_pkg::tl_d2h_t tl_sram_i,
  output tlul_pkg::tl_h2d_t tl_hyperram_o,
  input  tlul_pkg::tl_d2h_t tl_hyperram_i,
  output tlul_pkg::tl_h2d_t tl_rev_tag_o,
  input  tlul_pkg::tl_d2h_t tl_rev_tag_i,
  output tlul_pkg::tl_h2d_t tl_peri_o,
  input  tlul_pkg::tl_d2h_t tl_peri_i,
  output tlul_pkg::tl_h2d_t tl_spi_lcd_o,
  input  tlul_pkg::tl_d2h_t tl_spi_lcd_i,
  output tlul_pkg::tl_h2d_t tl_spi_ethmac_o,
  input  tlul_pkg::tl_d2h_t tl_spi_ethmac_i,
  output tlul_pkg::tl_h2d_t tl_i2c0_o,
  input  tlul_pkg::tl_d2h_t tl_i2c0_i,
  output tlul_pkg::tl_h2d_t tl_i2c1_o,
  input  tlul_pkg::tl_d2h_t tl_i2c1_i,
  output tlul_pkg::tl_h2d_t tl_spi0_o,
  input  tlul_pkg::tl_d2h_t tl_spi0_i,
  output tlul_pkg::tl_h2d_t tl_spi1_o,
  input  tlul_pkg::tl_d2h_t tl_spi1_i,
  output tlul_pkg::tl_h2d_t tl_spi2_o,
  input  tlul_pkg::tl_d2h_t tl_spi2_i,
  output tlul_pkg::tl_h2d_t tl_usbdev_o,
  input  tlul_pkg::tl_d2h_t tl_usbdev_i,
  output tlul_pkg::tl_h2d_t tl_dbg_dev_o,
  input  tlul_pkg::tl_d2h_t tl_dbg_dev_i,
  output tlul_pkg::tl_h2d_t tl_rv_plic_o,
  input  tlul_pkg::tl_d2h_t tl_rv_plic_i,

  input prim_mubi_pkg::mubi4_t scanmode_i
);

  import tlul_pkg::*;
  import tl_main_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = ^scanmode_i;

  tl_h2d_t tl_s1n_16_us_h2d ;
  tl_d2h_t tl_s1n_16_us_d2h ;


  tl_h2d_t tl_s1n_16_ds_h2d [14];
  tl_d2h_t tl_s1n_16_ds_d2h [14];

  // Create steering signal
  logic [3:0] dev_sel_s1n_16;


  tl_h2d_t tl_sm1_17_us_h2d [2];
  tl_d2h_t tl_sm1_17_us_d2h [2];

  tl_h2d_t tl_sm1_17_ds_h2d ;
  tl_d2h_t tl_sm1_17_ds_d2h ;


  tl_h2d_t tl_sm1_18_us_h2d [2];
  tl_d2h_t tl_sm1_18_us_d2h [2];

  tl_h2d_t tl_sm1_18_ds_h2d ;
  tl_d2h_t tl_sm1_18_ds_d2h ;


  tl_h2d_t tl_sm1_19_us_h2d [2];
  tl_d2h_t tl_sm1_19_us_d2h [2];

  tl_h2d_t tl_sm1_19_ds_h2d ;
  tl_d2h_t tl_sm1_19_ds_d2h ;

  tl_h2d_t tl_asf_20_us_h2d ;
  tl_d2h_t tl_asf_20_us_d2h ;
  tl_h2d_t tl_asf_20_ds_h2d ;
  tl_d2h_t tl_asf_20_ds_d2h ;

  tl_h2d_t tl_s1n_21_us_h2d ;
  tl_d2h_t tl_s1n_21_us_d2h ;


  tl_h2d_t tl_s1n_21_ds_h2d [3];
  tl_d2h_t tl_s1n_21_ds_d2h [3];

  // Create steering signal
  logic [1:0] dev_sel_s1n_21;



  assign tl_sm1_17_us_h2d[0] = tl_s1n_16_ds_h2d[0];
  assign tl_s1n_16_ds_d2h[0] = tl_sm1_17_us_d2h[0];

  assign tl_sm1_18_us_h2d[0] = tl_s1n_16_ds_h2d[1];
  assign tl_s1n_16_ds_d2h[1] = tl_sm1_18_us_d2h[0];

  assign tl_rev_tag_o = tl_s1n_16_ds_h2d[2];
  assign tl_s1n_16_ds_d2h[2] = tl_rev_tag_i;

  assign tl_sm1_19_us_h2d[0] = tl_s1n_16_ds_h2d[3];
  assign tl_s1n_16_ds_d2h[3] = tl_sm1_19_us_d2h[0];

  assign tl_spi_lcd_o = tl_s1n_16_ds_h2d[4];
  assign tl_s1n_16_ds_d2h[4] = tl_spi_lcd_i;

  assign tl_spi_ethmac_o = tl_s1n_16_ds_h2d[5];
  assign tl_s1n_16_ds_d2h[5] = tl_spi_ethmac_i;

  assign tl_i2c0_o = tl_s1n_16_ds_h2d[6];
  assign tl_s1n_16_ds_d2h[6] = tl_i2c0_i;

  assign tl_i2c1_o = tl_s1n_16_ds_h2d[7];
  assign tl_s1n_16_ds_d2h[7] = tl_i2c1_i;

  assign tl_spi0_o = tl_s1n_16_ds_h2d[8];
  assign tl_s1n_16_ds_d2h[8] = tl_spi0_i;

  assign tl_spi1_o = tl_s1n_16_ds_h2d[9];
  assign tl_s1n_16_ds_d2h[9] = tl_spi1_i;

  assign tl_spi2_o = tl_s1n_16_ds_h2d[10];
  assign tl_s1n_16_ds_d2h[10] = tl_spi2_i;

  assign tl_asf_20_us_h2d = tl_s1n_16_ds_h2d[11];
  assign tl_s1n_16_ds_d2h[11] = tl_asf_20_us_d2h;

  assign tl_dbg_dev_o = tl_s1n_16_ds_h2d[12];
  assign tl_s1n_16_ds_d2h[12] = tl_dbg_dev_i;

  assign tl_rv_plic_o = tl_s1n_16_ds_h2d[13];
  assign tl_s1n_16_ds_d2h[13] = tl_rv_plic_i;

  assign tl_sm1_17_us_h2d[1] = tl_s1n_21_ds_h2d[0];
  assign tl_s1n_21_ds_d2h[0] = tl_sm1_17_us_d2h[1];

  assign tl_sm1_18_us_h2d[1] = tl_s1n_21_ds_h2d[1];
  assign tl_s1n_21_ds_d2h[1] = tl_sm1_18_us_d2h[1];

  assign tl_sm1_19_us_h2d[1] = tl_s1n_21_ds_h2d[2];
  assign tl_s1n_21_ds_d2h[2] = tl_sm1_19_us_d2h[1];

  assign tl_s1n_16_us_h2d = tl_ibex_lsu_i;
  assign tl_ibex_lsu_o = tl_s1n_16_us_d2h;

  assign tl_sram_o = tl_sm1_17_ds_h2d;
  assign tl_sm1_17_ds_d2h = tl_sram_i;

  assign tl_hyperram_o = tl_sm1_18_ds_h2d;
  assign tl_sm1_18_ds_d2h = tl_hyperram_i;

  assign tl_peri_o = tl_sm1_19_ds_h2d;
  assign tl_sm1_19_ds_d2h = tl_peri_i;

  assign tl_usbdev_o = tl_asf_20_ds_h2d;
  assign tl_asf_20_ds_d2h = tl_usbdev_i;

  assign tl_s1n_21_us_h2d = tl_dbg_host_i;
  assign tl_dbg_host_o = tl_s1n_21_us_d2h;

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_16 = 4'd14;
    if ((tl_s1n_16_us_h2d.a_address &
         ~(ADDR_MASK_SRAM)) == ADDR_SPACE_SRAM) begin
      dev_sel_s1n_16 = 4'd0;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_HYPERRAM)) == ADDR_SPACE_HYPERRAM) begin
      dev_sel_s1n_16 = 4'd1;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_REV_TAG)) == ADDR_SPACE_REV_TAG) begin
      dev_sel_s1n_16 = 4'd2;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_s1n_16 = 4'd3;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_SPI_LCD)) == ADDR_SPACE_SPI_LCD) begin
      dev_sel_s1n_16 = 4'd4;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_SPI_ETHMAC)) == ADDR_SPACE_SPI_ETHMAC) begin
      dev_sel_s1n_16 = 4'd5;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_I2C0)) == ADDR_SPACE_I2C0) begin
      dev_sel_s1n_16 = 4'd6;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_I2C1)) == ADDR_SPACE_I2C1) begin
      dev_sel_s1n_16 = 4'd7;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_SPI0)) == ADDR_SPACE_SPI0) begin
      dev_sel_s1n_16 = 4'd8;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_SPI1)) == ADDR_SPACE_SPI1) begin
      dev_sel_s1n_16 = 4'd9;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_SPI2)) == ADDR_SPACE_SPI2) begin
      dev_sel_s1n_16 = 4'd10;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_USBDEV)) == ADDR_SPACE_USBDEV) begin
      dev_sel_s1n_16 = 4'd11;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_DBG_DEV)) == ADDR_SPACE_DBG_DEV) begin
      dev_sel_s1n_16 = 4'd12;

    end else if ((tl_s1n_16_us_h2d.a_address &
                  ~(ADDR_MASK_RV_PLIC)) == ADDR_SPACE_RV_PLIC) begin
      dev_sel_s1n_16 = 4'd13;
end
  end

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_21 = 2'd3;
    if ((tl_s1n_21_us_h2d.a_address &
         ~(ADDR_MASK_SRAM)) == ADDR_SPACE_SRAM) begin
      dev_sel_s1n_21 = 2'd0;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_HYPERRAM)) == ADDR_SPACE_HYPERRAM) begin
      dev_sel_s1n_21 = 2'd1;

    end else if ((tl_s1n_21_us_h2d.a_address &
                  ~(ADDR_MASK_PERI)) == ADDR_SPACE_PERI) begin
      dev_sel_s1n_21 = 2'd2;
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqPass  (14'h2f3f),
    .DRspPass  (14'h2f3f),
    .DReqDepth (56'h1000011000000),
    .DRspDepth (56'h1000011000000),
    .N         (14)
  ) u_s1n_16 (
    .clk_i        (clk_sys_i),
    .rst_ni       (rst_sys_ni),
    .tl_h_i       (tl_s1n_16_us_h2d),
    .tl_h_o       (tl_s1n_16_us_d2h),
    .tl_d_o       (tl_s1n_16_ds_h2d),
    .tl_d_i       (tl_s1n_16_ds_d2h),
    .dev_select_i (dev_sel_s1n_16)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_17 (
    .clk_i        (clk_sys_i),
    .rst_ni       (rst_sys_ni),
    .tl_h_i       (tl_sm1_17_us_h2d),
    .tl_h_o       (tl_sm1_17_us_d2h),
    .tl_d_o       (tl_sm1_17_ds_h2d),
    .tl_d_i       (tl_sm1_17_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqDepth (4'h0),
    .DRspDepth (4'h0),
    .M         (2)
  ) u_sm1_18 (
    .clk_i        (clk_sys_i),
    .rst_ni       (rst_sys_ni),
    .tl_h_i       (tl_sm1_18_us_h2d),
    .tl_h_o       (tl_sm1_18_us_d2h),
    .tl_d_o       (tl_sm1_18_ds_h2d),
    .tl_d_i       (tl_sm1_18_ds_d2h)
  );
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_19 (
    .clk_i        (clk_sys_i),
    .rst_ni       (rst_sys_ni),
    .tl_h_i       (tl_sm1_19_us_h2d),
    .tl_h_o       (tl_sm1_19_us_d2h),
    .tl_d_o       (tl_sm1_19_ds_h2d),
    .tl_d_i       (tl_sm1_19_ds_d2h)
  );
  tlul_fifo_async #(
    .ReqDepth        (1),
    .RspDepth        (1)
  ) u_asf_20 (
    .clk_h_i      (clk_sys_i),
    .rst_h_ni     (rst_sys_ni),
    .clk_d_i      (clk_usb_i),
    .rst_d_ni     (rst_usb_ni),
    .tl_h_i       (tl_asf_20_us_h2d),
    .tl_h_o       (tl_asf_20_us_d2h),
    .tl_d_o       (tl_asf_20_ds_h2d),
    .tl_d_i       (tl_asf_20_ds_d2h)
  );
  tlul_socket_1n #(
    .HReqPass  (1'b0),
    .HRspPass  (1'b0),
    .DReqDepth (12'h0),
    .DRspDepth (12'h0),
    .N         (3)
  ) u_s1n_21 (
    .clk_i        (clk_sys_i),
    .rst_ni       (rst_sys_ni),
    .tl_h_i       (tl_s1n_21_us_h2d),
    .tl_h_o       (tl_s1n_21_us_d2h),
    .tl_d_o       (tl_s1n_21_ds_h2d),
    .tl_d_i       (tl_s1n_21_ds_d2h),
    .dev_select_i (dev_sel_s1n_21)
  );

endmodule
