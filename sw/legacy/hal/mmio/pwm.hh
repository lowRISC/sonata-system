// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

/*
 * This file is autogenerated by the tool zermio.
 */

#pragma once
/* The `platform.hh` should be created and include the specific platform header which will contain the device
 * addresses.*/
#include "platform.hh"
#include "mmio.hh"
namespace mmio {
namespace pwm {

/* PWM width */
union WidthReg {
 private:
  zermio::Register reg_;

 public:
  /* Pwm width. */
  zermio::BitField<0, 8, zermio::Permissions::ReadWrite> value;
  constexpr WidthReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline WidthReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* PWM counter */
union CounterReg {
 private:
  zermio::Register reg_;

 public:
  /* Pwm counter. */
  zermio::BitField<0, 8, zermio::Permissions::ReadWrite> value;
  constexpr CounterReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline CounterReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* To facilitate compiler optimization of this abstraction, prefer using this struct within a small scope.*/
struct Pwm {
  WidthReg width;
  CounterReg counter;

  constexpr Pwm(platform::Pwm addr) : width(addr + 0x0), counter(addr + 0x4) {}
};

}  // namespace pwm
}  // namespace mmio
