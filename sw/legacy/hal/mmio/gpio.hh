// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

/*
 * This file is autogenerated by the tool zermio.
 */

#pragma once
/* The `platform.hh` should be created and include the specific platform header which will contain the device
 * addresses.*/
#include "platform.hh"
#include "mmio.hh"
namespace mmio {
namespace gpio {

/* Write to control the gpio state */
union OutReg {
 private:
  zermio::Register reg_;

 public:
  /* Pins. */
  zermio::BitField<0, 32, zermio::Permissions::Write> pins;
  constexpr OutReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline OutReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* Read the gpio state */
union InReg {
 private:
  zermio::Register reg_;

 public:
  /* Pins. */
  zermio::BitField<0, 32, zermio::Permissions::Read> pins;
  constexpr InReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline InReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* DBNC */
union InDbncReg {
 private:
  zermio::Register reg_;

 public:
  /* DBNC. */
  zermio::BitField<0, 32, zermio::Permissions::Read> value;
  constexpr InDbncReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline InDbncReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* Not used */
union OutputEnableReg {
 private:
  zermio::Register reg_;

 public:
  /* val */
  zermio::BitField<0, 32, zermio::Permissions::ReadWrite> value;
  constexpr OutputEnableReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline OutputEnableReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* To facilitate compiler optimization of this abstraction, prefer using this struct within a small scope.*/
struct Gpio {
  OutReg out;
  InReg in;
  InDbncReg in_dbnc;
  OutputEnableReg output_enable;

  constexpr Gpio(platform::Gpio addr)
      : out(addr + 0x0), in(addr + 0x4), in_dbnc(addr + 0x8), output_enable(addr + 0xc) {}
};

}  // namespace gpio
}  // namespace mmio
