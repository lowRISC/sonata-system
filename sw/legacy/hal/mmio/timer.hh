// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

/*
 * This file is autogenerated by the tool zermio.
 */

#pragma once
/* The `platform.hh` should be created and include the specific platform header which will contain the device
 * addresses.*/
#include "platform.hh"
#include "mmio.hh"
namespace mmio {
namespace timer {

/* mtime low */
union MtimelReg {
 private:
  zermio::Register reg_;

 public:
  /* mtime low */
  zermio::BitField<0, 32, zermio::Permissions::ReadWrite> value;
  constexpr MtimelReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline MtimelReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* mtime high */
union MtimehReg {
 private:
  zermio::Register reg_;

 public:
  /* mtime high */
  zermio::BitField<0, 32, zermio::Permissions::ReadWrite> value;
  constexpr MtimehReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline MtimehReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* mtime cmp low */
union MtimecmplReg {
 private:
  zermio::Register reg_;

 public:
  /* mtime cmp low */
  zermio::BitField<0, 32, zermio::Permissions::ReadWrite> value;
  constexpr MtimecmplReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline MtimecmplReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* mtime cmp high */
union MtimecmphReg {
 private:
  zermio::Register reg_;

 public:
  /* mtime cmp high */
  zermio::BitField<0, 32, zermio::Permissions::ReadWrite> value;
  constexpr MtimecmphReg(uintptr_t addr) : reg_{.addr = addr} {}

  inline void commit() { reg_.commit(); }

  inline MtimecmphReg& fetch() {
    reg_.fetch();
    return *this;
  }
};

/* To facilitate compiler optimization of this abstraction, prefer using this struct within a small scope.*/
struct Timer {
  MtimelReg mtimel;
  MtimehReg mtimeh;
  MtimecmplReg mtimecmpl;
  MtimecmphReg mtimecmph;

  constexpr Timer(platform::Timer addr)
      : mtimel(addr + 0xbff8), mtimeh(addr + 0xbffc), mtimecmpl(addr + 0x4000), mtimecmph(addr + 0x4004) {}
};

}  // namespace timer
}  // namespace mmio
