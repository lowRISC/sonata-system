// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

#include <assert.h>
#include <stdlib.h>
#include <string.h>

#include "i2c_hat_id.hh"

// Captured EEPROM ID header from Raspberry Pi Sense HAT; this device is not Read Only and it
// supports Byte/Page Writes too. This static signature is used to initialise the memory.
static const uint8_t id[] = {
  0x52, 0x2d, 0x50, 0x69, 0x01, 0x00, 0x03, 0x00,
  0xf0, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x2d, 0x00, 0x00, 0x00, 0xe7, 0x58, 0xd1, 0x95,
  0xf1, 0x56, 0x28, 0xab, 0xcb, 0x4e, 0x99, 0x42,
  0xc7, 0x79, 0xd6, 0xa3, 0x01, 0x00, 0x01, 0x00,
  0x0c, 0x09, 0x52, 0x61, 0x73, 0x70, 0x62, 0x65,
  0x72, 0x72, 0x79, 0x20, 0x50, 0x69, 0x53, 0x65,
  0x6e, 0x73, 0x65, 0x20, 0x48, 0x41, 0x54, 0x7f,
  0x27, 0x02, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xed,
  0x6e, 0x03, 0x00, 0x02, 0x00, 0x7f, 0x03, 0x00,
  0x00, 0xd0, 0x0d, 0xfe, 0xed, 0x00, 0x00, 0x03,
  0x7d, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x03,
  0x2c, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x02,
  0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x1a, 0x00, 0x00, 0x00, 0x00, 0x62, 0x72, 0x63,
  0x6d, 0x2c, 0x62, 0x63, 0x6d, 0x32, 0x37, 0x30,
  0x38, 0x00, 0x62, 0x72, 0x63, 0x6d, 0x2c, 0x62,
  0x63, 0x6d, 0x32, 0x37, 0x30, 0x39, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x66, 0x72, 0x61,
  0x67, 0x6d, 0x65, 0x6e, 0x74, 0x40, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x0b, 0xde, 0xad, 0xbe,
  0xef, 0x00, 0x00, 0x00, 0x01, 0x5f, 0x5f, 0x6f,
  0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x5f,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x2d, 0x6f, 0x6b, 0x61,
  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x72, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x6e,
  0x73, 0x65, 0x40, 0x34, 0x36, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x00, 0x72, 0x70, 0x69,
  0x2c, 0x72, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x6e,
  0x73, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
  0x38, 0xde, 0xad, 0xbe, 0xef, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x2d, 0x6f, 0x6b, 0x61, 0x79, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x6c, 0x73, 0x6d, 0x39, 0x64, 0x73, 0x31,
  0x2d, 0x6d, 0x61, 0x67, 0x6e, 0x40, 0x31, 0x63,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x73, 0x74, 0x2c,
  0x6c, 0x73, 0x6d, 0x39, 0x64, 0x73, 0x31, 0x2d,
  0x6d, 0x61, 0x67, 0x6e, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x34, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x2d, 0x6f, 0x6b, 0x61, 0x79, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x01, 0x6c, 0x73, 0x6d, 0x39, 0x64, 0x73, 0x31,
  0x2d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x36, 0x61,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x00, 0x73, 0x74, 0x2c,
  0x6c, 0x73, 0x6d, 0x39, 0x64, 0x73, 0x31, 0x2d,
  0x61, 0x63, 0x63, 0x65, 0x6c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x6a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x2d, 0x6f, 0x6b, 0x61,
  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x6c, 0x70, 0x73,
  0x32, 0x35, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x73,
  0x73, 0x40, 0x35, 0x63, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x73, 0x74, 0x2c, 0x6c, 0x70, 0x73, 0x32,
  0x35, 0x68, 0x2d, 0x70, 0x72, 0x65, 0x73, 0x73,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x2d, 0x6f, 0x6b, 0x61,
  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x68, 0x74, 0x73,
  0x32, 0x32, 0x31, 0x2d, 0x68, 0x75, 0x6d, 0x69,
  0x64, 0x40, 0x35, 0x66, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x73, 0x74, 0x2c, 0x68, 0x74, 0x73, 0x32,
  0x32, 0x31, 0x2d, 0x68, 0x75, 0x6d, 0x69, 0x64,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00,
  0x5f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x2d, 0x6f, 0x6b, 0x61,
  0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x01, 0x5f, 0x5f, 0x66,
  0x69, 0x78, 0x75, 0x70, 0x73, 0x5f, 0x5f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x00, 0x00, 0x47, 0x2f, 0x66, 0x72,
  0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x40, 0x30,
  0x3a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x3a,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00,
  0x4c, 0x2f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
  0x6e, 0x74, 0x40, 0x30, 0x2f, 0x5f, 0x5f, 0x6f,
  0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x5f,
  0x2f, 0x72, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x6e,
  0x73, 0x65, 0x40, 0x34, 0x36, 0x3a, 0x6b, 0x65,
  0x79, 0x73, 0x2d, 0x69, 0x6e, 0x74, 0x2d, 0x67,
  0x70, 0x69, 0x6f, 0x73, 0x3a, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x09, 0x63, 0x6f, 0x6d,
  0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x00,
  0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0x23,
  0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d,
  0x63, 0x65, 0x6c, 0x6c, 0x73, 0x00, 0x23, 0x73,
  0x69, 0x7a, 0x65, 0x2d, 0x63, 0x65, 0x6c, 0x6c,
  0x73, 0x00, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
  0x00, 0x72, 0x65, 0x67, 0x00, 0x6b, 0x65, 0x79,
  0x73, 0x2d, 0x69, 0x6e, 0x74, 0x2d, 0x67, 0x70,
  0x69, 0x6f, 0x73, 0x00, 0x69, 0x32, 0x63, 0x31,
  0x00, 0x67, 0x70, 0x69, 0x6f, 0x00, 0x09, 0x75,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Both of these are physical device properties so they should not be changed anyway,
// but they must be powers of two for the logic to work.
static_assert(!(i2c_hat_id::kMemSize  & (i2c_hat_id::kMemSize  - 1u)));
static_assert(!(i2c_hat_id::kPageSize & (i2c_hat_id::kPageSize - 1u)));

// Constructor initialises the device state.
i2c_hat_id::i2c_hat_id(i2caddr_t addr) : i2cdevice(addr) {
  busReset();
  // Initialise the memory contents from the static signature above.
  assert(sizeof(mem) >= sizeof(id));
  memcpy(mem, id, sizeof(id));
}

// Bus reset condition; reset the device.
void i2c_hat_id::busReset() {
  i2cdevice::busReset();
  byteCount = 0u;
  currAddr = 0u;
}

// Start condition occurred on the I2C bus (broadcast to all devices).
void i2c_hat_id::startCond() {
  i2cdevice::startCond();
  byteCount = 0u;
}

// Write a byte of data to the the RPi Sense HAT ID EEPROM.
bool i2c_hat_id::writeByte(uint8_t inByte, uint32_t oobIn) {
  switch (byteCount) {
    case 0u: currAddr = (uint16_t)inByte << 8; break;
    case 1u: currAddr |= inByte; break;
    default:
      // Note: this is probably not modelling write behaviour properly.
      logText("HAT ID writing byte 0x%0x to addr 0x%0x\n", inByte, currAddr);
      mem[currAddr & (kMemSize - 1u)] = inByte;
      // Auto-increment address; addressing wraps at the end of the page.
      currAddr++;
      if (!(currAddr & kPageSize)) currAddr -= kPageSize;
      break;
  }
  byteCount++;
  // Byte accepted, send ACK.
  return true;
}

// Read a byte of data from the RPi Sense HAT ID EEPROM.
bool i2c_hat_id::readByte(uint32_t oobIn, uint8_t &outByte, uint32_t &oobOut) {
  outByte = mem[currAddr & (kMemSize - 1u)];
  oobOut = 0u;
  logText("HAT ID reading byte 0x%0x from addr 0x%0x\n", outByte, currAddr);
  // Auto-increment address.
  currAddr++;
  // Byte available, transmit to controller.
  return true;
}
